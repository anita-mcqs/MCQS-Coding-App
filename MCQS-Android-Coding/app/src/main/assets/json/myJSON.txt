[
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "finalize",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "finish",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "finished",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "final",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "finally",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following code:\n\n---\n    try {\t\n    int x = 5, y = 0;\n    System.out.print(x/y);\n    }\n---\n    catch (ArithmeticException ae) {\n---\n    System.out.print(\"error\");\n---\n    }\n    /*insert*/ \n---\n    {\n    System.out.print(\"success\");\n    }\n---"
    ],
    "question": [
      "What would you substitute for <code>/\\*insert\\*/</code> to output  the text \"<em style=\"color: green\">success</em>\"  to the console."
    ],
    "core": [
      "The <code>finally</code> block always executes when the try block exits."
    ],
    "explanation": [
      "The <code>finally</code> block will always be executed, even if unexpected errors within the <code>try</code> block occur.\n If your code inside the <code>try</code> or <code>catch</code> block includes a <code>return</code> statement, the code inside the <code>finally</code> block will get executed before the <code>return</code> statement.\n<br><br>A point of note, If the JVM exits while the <code>try/catch</code> block is being executed or the thread executing the <code>try/catch</code> block is killed or interrupted, the code within the <code>finally</code> block may not execute."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "==",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "%=",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "=!",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "-=",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "=",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following java code snippet:\n<pre style=\"display: block; white-space: pre; margin: 1em 0;\">\n<code>boolean</code> a = <code>false</code>;\n\t<code>if</code>(a <em style=\"color: green\">/*Insert*/</em> <code>true</code>){\n\t\tSystem.<em style=\"color: green\">out</em>.println(\"a is true\");\n\t}<code>else</code>{\n\t\tSystem.<em style=\"color: green\">out</em>.println(\"a is false\");\n}</pre>"
    ],
    "question": [
      "Which of the following  operators would you  insert instead of /*insert*/ above   to ensure that the string \"<code>a is  true</code>\" is output to the console screen."
    ],
    "core": [
      "The single <code> equal  </code> sign does not actually compare values but in fact <code>assigns </code> a value to the variable."
    ],
    "explanation": [
      "After inserting the <code>=</code> operator in to our code, the condition in the <code>if statement</code> now reads <code>a = true</code>. This now updates the value for <code>a</code> to <code>true</code>. The value for <code>a</code> had been previously set to <code>false</code> by the code <code>boolean a = false</code>\n<br>As the condition now evaluates to true, the code within the curly braces gets executed and <code>a is  true</code> is print to the console screen.\n<br>If we replaced <code>=</code> with <code>==</code> the condition test <code>a == true</code> would test if <code>the value for a was true</code> This code would evaluate to false, the code within the curly braces would never have been executed and we would then skip to the next branch in the conditional statement and print  <code>a is false</code> to the console screen."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012610",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0126810",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n    i+=4;\n    break;\n    }\n---\n    System.out.print(i);\n    }\n---"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "A <code>break</code> keyword results in the termination of the statement to which it applies (<code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop)."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012610",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0126810",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n---\n    i+=4;\n    break;\n     }\n---\n    System.out.print(i);\n    }\n---"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "A break statement results in the termination of the statement to which it applies (switch, for, do, or while)."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements\n\n <br><code>int[] myArray = new int[10];</code>\n\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01789",
                "$": {
                  "node": "Options",
                  "item": "6",
                  "dataIndex": "0"
                }
              },
              {
                "_": "16789",
                "$": {
                  "node": "Options",
                  "item": "7",
                  "dataIndex": "0"
                }
              },
              {
                "_": "12789",
                "$": {
                  "node": "Options",
                  "item": "8",
                  "dataIndex": "0"
                }
              },
              {
                "_": "12789",
                "$": {
                  "node": "Options",
                  "item": "9",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "06789",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n\tmyArray[i] = i+1;\n\tif(myArray[i] == 2) {\n\t\ti+=4;\n\t\tcontinue;\n\t}\n---\n\tSystem.out.print(i);\n    }"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "The <code>continue</code> statement skips the current iteration of a <code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the <code>for loop</code> that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use <code>zero</code> indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop <code>i</code> = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value <code>1</code>!\n<br><br>Next comes the <code>if</code> statement. This tests if the element at <code>i</code> is equal to <code>2</code>. Don't forget that <code>i</code> is still equal to <code>0</code> and the value currently stored in the <code>0</code> element is <code>1</code>. <code>2</code> is not equal to <code>1</code>.  Because of this the <code>if</code> statement evaluates to <code>false</code> and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the <code>for loop</code>,  <code>i++</code> will get executed. This will increase <code>i</code> from <code>0</code> to <code>1</code>. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the <code>if</code> statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the <code>if</code> statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=4</code> is the same thing as saying <code>i = i + 4</code>. Knowing the value of <code>i</code> is currently <code>1</code>, we add <code>1 + 4</code> and store it back in <code>i</code>. This means <code>i</code> is now equal to <code>5</code>.\n<br>Next the <code>continue</code> statement gets executed. This will exit the current iteration of the <code>for loop</code>, without executing any code that may come after it, but will continue with the next iteration of loop. <code>i</code> increases by <code>1</code> to <code>6</code> and we start back at the first line of the <code>for loop</code>.\n<br>In the next line we again substitute the value for <code>i</code>. <code>myArray[6] = 6+1</code>, meaning the value stored in the 6th element of myArray is <code>7</code>. The conditional statement in the next line checks the see if the <code>6th element</code> is equal to <code>2</code>. It's not, so the code in the curly braces never gets executed and value for <code>i</code> currently <code>6</code> gets output to the console.\n<br>Currently <code>06</code> is output to the console. \n<br>This process continues, successfully, for the next <code>3</code> iterations of the <code>for loop</code>. After the current iteration <code>06789</code> is printed to the output and with <code>i</code> now <code>9</code>, the same as the length of the array, <code>9</code> the condition in the <code>for loop</code> fails and the loop terminates."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>3rd</code>",
            "$": {
              "dataIndex": "2",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int).8)]",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>1st</code>",
            "$": {
              "dataIndex": "0",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "int",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Int16",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "boolean",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "byte",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "short",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "You are working on a script that regulates an electronic toaster and discover that  a certain  primitive java data type has been used throughout the application . This primitive data uses 16 bits and that has a minimum value of  -32,768 and a maximum value of 32,767"
    ],
    "question": [
      "Which of the following <code>primitive data types</code> has likely been used ?"
    ],
    "core": [
      "The short data type is a 16-bit signed integer and is a Java primitive"
    ],
    "explanation": [
      "The short data type is a 16-bit signed integer and is a Java primitive. Primitives are the fundamental data type in Java and all start with lowercase letters. An important thing to remember about each primitive is what kind of value you would store in it. <br>Choosing the right data type for a given problem can help save memory where memory savings will actually matter. \n<br>The Java language supports 8 primitive data types. These are boolean, char, byte, short, int, long, float and double. Char, byte, short and int all have a default value of 0. Long has a default value of 0L. Boolean has a default value of 'false', while double has a default value of 0.0 and float has a default value of 0.0f."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "1,0,0",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0,1,0",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0,1,1",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1,1,0",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0,0,1",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Java enables you  to copy parts of one array into another .\nConsider the following code \n\n---\n    int [  ]  first = {1,2,3,4,5}\n---\n    int [  ]  second = new int[5] \n---\n    System.arraycopy( first, /*A*/, second, /*B*/,  /*C*/) \n---"
    ],
    "question": [
      "What would you insert instead of **/\\*A\\*/**, **/\\*B\\*/**  and  **/\\*C\\*/** to achieve an array called  **second**   that contains the array :  <b>[1, 0, 0, 0, 0]</b>"
    ],
    "core": [
      "The correct format for the **arraycopy** method is **arraycopy(Object src, int srcPos, Obj dest, int destPos, int ammountToCopy);"
    ],
    "explanation": [
      "<br><br>Lets consider what this means.\n<br>Firstly we create the <code>arraycopy()</code> method. This method takes 5 parameters. <code>Obj src, int srcPos, Obj dest, int destPos, int ammountToCopy</code>\n<br><br><code>Obj src</code> is the array name you wish to copy elements from.\n<br><code>int srcPos</code>  is the position you wish to start copying elements from. Remember that arrays use zero indexing so if we wished to start copying from the first element then <code>int srcPos = 1</code>\n<br><code>Obj dest</code>  is the array that you wish to copy elements too.\n<br><code>int destPos</code>  indicates the starting position you will copy too in the destination array.\n<br><code>int ammountToCopy</code> indicates the number of elements to copy."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "do/output",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "first/then",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "if/finally",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "run/lastly",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "try/catch",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Conside the following piece of code:\n\n---\n    /*A*/ {\t\n    int x = 5, y = 0;\n---\n    System.out.println(x/y);\n---\n    }\n    /*B*/ (ArithmeticException ae) {\n\tSystem.out.println(\"error\");\n---\n    }\n---"
    ],
    "question": [
      "Which of the following would you substitute for <code>/\\*A\\*/</code> and <code>/\\*B\\*/</code> to ensure that the code : `System.out.println( )` is executed and that  the string **error** then  prints to the console?"
    ],
    "core": [
      "The Java <code>try</code> block is used to enclose code that might throw an exception. The Java <code>catch</code> block is then  used to <code>handle</code> the Exception."
    ],
    "explanation": [
      "Run-time errors in Java are called exceptions, and the process for handling these errors is called exception handling. Code that may produce errors must be placed in a <code>try/catch</code> block.<br>\n<code>try</code>, tells the compiler, <code>try</code> to execute the code between the curly braces, but if something happens, <code>catch</code> the error and execute the code that will deal with it.\n<br>\nDifferent exceptions will be thrown for different type of errors. If the <code>catch</code> block exists in the program for this particular type of an error, it will be caught and the program will jump into the <code>catch</code> block to execute the code located there. The program will stay alive, and this exception is considered to be taken care of."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "protected",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "package-private",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "private-method",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "private-final",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "private",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "As part of your current project you are required that the doSomething() method is only available to other methods in the same class. No other class should be able to see or use its contents. Consider the following piece:\n\n---\n    /*insert here*/ void doSomething() {\n---\n    byte John = 21;\n---\n    boolean isTrue = false;\n---\n    if (isTrue == false) {\n---\n    System.out.println(\"John is 21\");\n---\n    }\n    }\n---"
    ],
    "question": [
      "Which of the following in place of  /\\*insert here\\*/  will guarantee that the code above is only available to the methods in the class which its defined."
    ],
    "core": [
      "The <code>private</code> access modifier allows only methods in the same class to access the private method."
    ],
    "explanation": [
      "This <code>private method</code> is only available and can only be accessed by other methods within the class which contains it. All other classes will not be able to see, or use the code within the <code>private method</code>."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr.number",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.elements",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.array_size",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.size_of",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr.length",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "You are developing a Java program for a new business. The program will need to store several objects in an **array** called **myArr**."
    ],
    "question": [
      "Which of the following code will correctly output the **number of elements** in this  array?"
    ],
    "core": [
      "The Array class in Java contains a <code>property</code> called <code>length</code>. This property stores the amount of elements the array contains."
    ],
    "explanation": [
      "The length of the array 'myArr' is set when the array is first created and is stored in a property called length. It can be accessed using .notation as follows \"myArr.length\"\n<br>To guarantee it prints to a new line we use the System.Out.Println() method.\n<br>If the question asked to print the output to the same line then the System.Out.Print() would be used instead."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "sortAsc(myArr)",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "sortAll(myArr)",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "sortArray(myArr)",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "array.sort(myArr)",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Arrays.sort(myArr)",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "You recently started a new job as a software developer. As part of your first job you will be required to sort an arrays contents . \n<br>Consider the following code <pre>int[ ] myArr = {1,3,5,7,8}</pre>"
    ],
    "question": [
      "How would you sort this array into ascending numerical order ?"
    ],
    "core": [
      "The <code>Arrays.sort</code> method  is useful for sorting arrays in ascending order."
    ],
    "explanation": [
      "<br><br>The Array class contain many methods for manipulation. Some other useful methods provided by the Arrays class include\n<br><code>binarySearch</code> method which is useful for searching an array for a specific value.\n<br><code>equals</code> method. This would be useful if you needed to check if one array is equal to another.\n<br><code>fill</code> method. If you needed to place specific values into certain elements, the fill method would accomplish this.\n<br><code>sort</code> method which is useful for sorting arrays in ascending order."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "240.0",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Compile time error",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Runtime error",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "160.0",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "320.0",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following lines of code:\n<pre style=\"white-space: pre\">\n<code>double</code> wage = 400;\n<code>double</code> tax = wage >= 500? 40:20;\n<code>double</code> net = wage-((wage/100)*tax);\nSystem.<em style=\"color: green\">out</em>.println(net);\n</pre>"
    ],
    "question": [
      "What will be the outcome when the code above gets executed?"
    ],
    "core": [
      "The <code>  ternary operator <em style=\"color: green\">? : </em> </code> (also known as the conditional operator) is a way to write an <code>if else statement</code>."
    ],
    "explanation": [
      "The code snippet above will compile and run without errors.\n<br>The statement <code>double tax = wage >= 500? 40:20;</code> is used to assign a value to the variable <code>tax</code> based on the expression <code>wage >= 500?</code>. If this expression evaluated to true (currently it is <code>false</code> as wage has been set to <code>400</code>), the value after the question mark would get assigned to <code>tax</code>, otherwise the value after the colon gets assigned to <code>tax</code>. In this case the value after the colon is <code>20</code> so <code>tax = 20</code>\n<br>If you want to know how this translates to an <code>if/then else</code> statement take a look at the following:\n<pre style=\"white-space: pre\">\n<code>if</code> (wage >= 500){\n\ttax = 40;\n} <code>else</code> {\n\ttax = 20;\n}\n</pre>\nNext we will preform the calculation in the following code, net = wage-((wage/100) <em>**</em> tax). We start our math with the at the innermost parentheses, (wage(currently 400.0)/100) is equal to <code>4</code>. Next (4.0 <em>**</em> tax(currently 20.0))  is equal to <code>80.0</code>. Finally we subtract this value from <code>wage</code> and we are left with <code>320.0</code>\n<br>The reason <code>320.0</code> is output to the console and not <code>320</code> is the <em style=\"color: green\">net</em> value is declared a <code>double</code> and this will always default to one decimal place if the value is a whole number."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "finish",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "close",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "end",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "terminate",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "exit",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The following piece of code, when written correctly, will terminate the program in which it belongs. \n\n---\n    System./*insert*/(0);\n---\n    System.out.println(\"This line will never be reached\");\n---"
    ],
    "question": [
      "What would you typically substitute for <b> /\\*insert here\\*/ </b>  to ensure that the line below would not be reached and that the program terminates all its activity without returning the method  and without returning an exception?"
    ],
    "core": [
      "System.exit(0); will terminate the currently running program."
    ],
    "explanation": [
      "*System.exit()* can be used to run shutdown hooks before the program quits. \n\nThis is a convenient way to handle shutdown in bigger programs, where all parts of the program can't (and shouldn't) be aware of each other. Then, if someone wants to quit, he can simply call *System.exit()*, and the *shutdown hooks* (if properly set up) take care of doing all necessary shutdown ceremonies such as closing files, releasing resources etc.\n\n\"This method never returns normally.\" means just that the method won't return; once a thread goes there, it won't come back."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "1 2 3",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2 3",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0 1",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1 2",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "run-time error",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[ ] myArray = {1,2,3} ;\n---\n     for (int i = 0; i < myArray.length;)\n     {\n    i++;\n    System.out.println(myArray[i]);\n    };\n---"
    ],
    "question": [
      "What is the expected output?"
    ],
    "core": [
      "When incrementing an integer using <code> ++ </code> as in <code> i++ </code> this will increase the  value of the integer by 1 and change the actual value of the integer."
    ],
    "explanation": [
      "<br><code>int x = i++</code>  will increase a value called <code>i</code> by 1 and store the old value in <code>x</code>.\nHere i is incremented before accessing the list.\n So it reads one element ahead everytime. Therefore a run-time error will result when the array has run out of elements.\n\n<br><br>So if the code above were to be executed,  <code>i++</code> would eventually increment <code>i</code> to a value greater than the length of the <code>array</code>. This would cause a runtime error \n<br>Ok, lets run through the code and each iteration of the loop.\n<br>Look at the <code>for loop</code>.\n<br>Now knowing what you do from the above code snippets you might now see why <code>i++</code> here might cause an error. If not it will all be come clearer soon.\n<br><code>i++ </code> increments and update the value <code>i</code> by one and check to see if its old value is equal to <code>myArray.length</code> which is <code>3</code>. If it is, execute the code between the curly braces, if not continue to the next branch in the <code>if statement</code>\n<br><code>System.out.print(toCharArray[i])</code>, all this does is print the current value stored in element <code>1</code> to the console <code>e</code>\n\n<br>Next time through the loop, again the first condition increments <code>i</code>, updates the value for <code>1</code> and checks the old value against the length of the array.\n<br>Following the above procedure <code>i</code> will eventually increment to <code>4</code> and as there is no 4th element in the array we get the <em style=\"color: green\">run time error<em>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "output",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2",
                "$": {
                  "node": "output",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "4",
                "$": {
                  "node": "output",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "8",
                "$": {
                  "node": "output",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "1",
                "$": {
                  "node": "output",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The following is a snippet in Java :\n\n---\n    @command myDouble = 1.999f;\n---\n    int[] num = {myDouble.intValue(),2};\n---\n    System.out.print(num[0]);\n---"
    ],
    "question": [
      "What is the expected output for the above ?"
    ],
    "core": [
      "a <code> Double </code> is a <code>Number</code>, so it has the method <code>intValue </code>, which  you can then use to derive  a <code> primitive int </code>"
    ],
    "explanation": [
      "In ordeer to answer this question you would need to know than in Java , a <code> Double </code> is a <code>double-precision </code> floating point number, similar to a float but with a larger range and precision. The term Double in this instance does not double the value! \n<br>\nYou will also need to know that <code>  intValue </code>    merely returns the integer part of the Double, so for 1.999 , you'll get 1, not 2. <br>\nFinally you will need to know that <i> int[] num = {myDouble.intValue(),2} </i> is creating an array called num, you are then printing the first element in this array <i> num[0] </i> \n<br>"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "Float",
            "$": {
              "dataIndex": "1",
              "title": "command"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "base",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "parent",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "top",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "original",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "super",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    public class test {\n    public static void main(String[] args) {\n    System.out.println(new childClass().num2);\n---\n    }\n    }\n    class parentClass{\n    int num1 = 21;\n---\n    }\n    class childClass extends parentClass{\n    int num1 = 32;\n---\n    int num2 = /*A*/  num1\n---\n     }\n---"
    ],
    "question": [
      "Which of the following keywords would you input for <code>/\\*A\\*/</code>, in the code snippet above to ensure that the resultant output  prints the number  <code>21</code> to the console?"
    ],
    "core": [
      "The <code>super</code> keyword is used inside a derived, or child class to access methods and variables defined in the parent, or <code>super</code> class."
    ],
    "explanation": [
      "In the above code snippet we have the same variable <code>num1</code> declared in both parent class and child class. There is no way we can access the <code>num1</code> variable of parent class without using <code>super</code> keyword."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>4th</code>",
            "$": {
              "dataIndex": "3",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "4",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "3",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The **binarySearch method** allows you to search for a value within an array and return its element.\nConsider the following array :\n\n---\n    int [  ] myArray = {1,2,3} \n---"
    ],
    "question": [
      "What would you insert into \n\n---\n     BinarySearch ( int[ ] myArray  , /*insert*/ ) \n---\nto return **-1**"
    ],
    "core": [
      "The <code>binarySearch</code> method returns a <code>-1</code> if the element is not found"
    ],
    "explanation": [
      "The correct format for the binarySearch method <pre>binarySearch(int [ ] arr, int keySearchFor);</pre>\n\nThis method returns index of the search key, if it is contained in the array, else it returns (-(insertion point) - 1). The insertion point is the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[myArr.length]",
                "$": {
                  "node": "Options",
                  "item": "6",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.lastIndex]",
                "$": {
                  "node": "Options",
                  "item": "7",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.lastIndex-1]",
                "$": {
                  "node": "Options",
                  "item": "8",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length()-1]",
                "$": {
                  "node": "Options",
                  "item": "9",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>last</code>",
            "$": {
              "dataIndex": "4",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The equals() method will check if the contents of one String or Integer is equal to another."
    ],
    "explanation": [
      "It does this by comparing the actual contents of the Strings or Integers, unlike the == operator which checks to see if the reference values are the same. In the above code we create an Integer and two String . In the print statement we check to see if the contents of lastName are equal to \"regNum.toString().length()\". This will return false because \"regNum.toString().length()\" will return the String \"4\" and lastName will return the String \"Johnson\". There is also an equalsIgnoreCase() method which will only take a String. This method will check to see if the contenst of two Strings are equal regardless of type case. \n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "equals(regNum.toString().",
            "$": {
              "dataIndex": "1",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The substring() method has two variants that will return a new String."
    ],
    "explanation": [
      "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3)); </pre> This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "substring(4)",
            "$": {
              "dataIndex": "5",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The length() method returns the length of the String that it is invoked on"
    ],
    "explanation": [
      "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3));  This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "length()",
            "$": {
              "dataIndex": "2",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n ---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The replace() method has two variations that remove either characters or substrings and return a new String."
    ],
    "explanation": [
      "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\"."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "replace(\"firstName\",\"\")",
            "$": {
              "dataIndex": "3",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The replace() method has two variations that remove either characters or substrings and return a new String."
    ],
    "explanation": [
      "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\"."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "replace(\"firstName\",\"\")",
            "$": {
              "dataIndex": "3",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The isEmpty() method returns true if, and only if, the length is equal to 0."
    ],
    "explanation": [
      "There are two variations of this method. The first variation takes two parameters. The first is the String we wish to look for and the second is the point in the String at which we want to begin looking. An example of this is: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\",3)); </pre> This will return false because although lastName begins with \"Jo\" we start looking at index 3, which is the fourth letter (Dont forget index's start at 0). If we had searched for \"ns\" in place of \"Jo\" it would have returned true. The second variation takes only a single parameter and this is the String we are searching for. When only one parameter is given it automatically starts searching at index 0. An example of this would be: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\")); </pre> This would return true."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "startsWith(\"Jo\")",
            "$": {
              "dataIndex": "4",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>3rd</code>",
            "$": {
              "dataIndex": "2",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int).8)]",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>1st</code>",
            "$": {
              "dataIndex": "0",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[myArr.length]",
                "$": {
                  "node": "Options",
                  "item": "6",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.lastIndex]",
                "$": {
                  "node": "Options",
                  "item": "7",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.lastIndex-1]",
                "$": {
                  "node": "Options",
                  "item": "8",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length()-1]",
                "$": {
                  "node": "Options",
                  "item": "9",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>last</code>",
            "$": {
              "dataIndex": "4",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>4th</code>",
            "$": {
              "dataIndex": "3",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The equals() method will check if the contents of one String or Integer is equal to another."
    ],
    "explanation": [
      "It does this by comparing the actual contents of the Strings or Integers, unlike the == operator which checks to see if the reference values are the same. In the above code we create an Integer and two String . In the print statement we check to see if the contents of lastName are equal to \"regNum.toString().length()\". This will return false because \"regNum.toString().length()\" will return the String \"4\" and lastName will return the String \"Johnson\". There is also an equalsIgnoreCase() method which will only take a String. This method will check to see if the contenst of two Strings are equal regardless of type case. \n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "equals(regNum.toString().",
            "$": {
              "dataIndex": "1",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The substring() method has two variants that will return a new String."
    ],
    "explanation": [
      "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3)); </pre> This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "substring(4)",
            "$": {
              "dataIndex": "5",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The length() method returns the length of the String that it is invoked on"
    ],
    "explanation": [
      "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3));  This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "length()",
            "$": {
              "dataIndex": "2",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n ---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The replace() method has two variations that remove either characters or substrings and return a new String."
    ],
    "explanation": [
      "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\"."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "replace(\"firstName\",\"\")",
            "$": {
              "dataIndex": "3",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The replace() method has two variations that remove either characters or substrings and return a new String."
    ],
    "explanation": [
      "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\"."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "replace(\"firstName\",\"\")",
            "$": {
              "dataIndex": "3",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The isEmpty() method returns true if, and only if, the length is equal to 0."
    ],
    "explanation": [
      "There are two variations of this method. The first variation takes two parameters. The first is the String we wish to look for and the second is the point in the String at which we want to begin looking. An example of this is: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\",3)); </pre> This will return false because although lastName begins with \"Jo\" we start looking at index 3, which is the fourth letter (Dont forget index's start at 0). If we had searched for \"ns\" in place of \"Jo\" it would have returned true. The second variation takes only a single parameter and this is the String we are searching for. When only one parameter is given it automatically starts searching at index 0. An example of this would be: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\")); </pre> This would return true."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "startsWith(\"Jo\")",
            "$": {
              "dataIndex": "4",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "1,0,0",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0,1,0",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0,1,1",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1,1,0",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0,0,1",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Java enables you  to copy parts of one array into another .\nConsider the following code \n\n---\n    int [  ]  first = {1,2,3,4,5}\n---\n    int [  ]  second = new int[5] \n---\n    System.arraycopy( first, /*A*/, second, /*B*/,  /*C*/) \n---"
    ],
    "question": [
      "What would you insert instead of **/\\*A\\*/**, **/\\*B\\*/**  and  **/\\*C\\*/** to achieve an array called  **second**   that contains the array :  <b>[1, 0, 0, 0, 0]</b>"
    ],
    "core": [
      "The correct format for the **arraycopy** method is **arraycopy(Object src, int srcPos, Obj dest, int destPos, int ammountToCopy);"
    ],
    "explanation": [
      "<br><br>Lets consider what this means.\n<br>Firstly we create the <code>arraycopy()</code> method. This method takes 5 parameters. <code>Obj src, int srcPos, Obj dest, int destPos, int ammountToCopy</code>\n<br><br><code>Obj src</code> is the array name you wish to copy elements from.\n<br><code>int srcPos</code>  is the position you wish to start copying elements from. Remember that arrays use zero indexing so if we wished to start copying from the first element then <code>int srcPos = 1</code>\n<br><code>Obj dest</code>  is the array that you wish to copy elements too.\n<br><code>int destPos</code>  indicates the starting position you will copy too in the destination array.\n<br><code>int ammountToCopy</code> indicates the number of elements to copy."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012610",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0126810",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n    i+=4;\n    break;\n    }\n---\n    System.out.print(i);\n    }\n---"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "A <code>break</code> keyword results in the termination of the statement to which it applies (<code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop)."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01789",
                "$": {
                  "node": "Options",
                  "item": "6",
                  "dataIndex": "0"
                }
              },
              {
                "_": "16789",
                "$": {
                  "node": "Options",
                  "item": "7",
                  "dataIndex": "0"
                }
              },
              {
                "_": "12789",
                "$": {
                  "node": "Options",
                  "item": "8",
                  "dataIndex": "0"
                }
              },
              {
                "_": "12789",
                "$": {
                  "node": "Options",
                  "item": "9",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "06789",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n\tmyArray[i] = i+1;\n\tif(myArray[i] == 2) {\n\t\ti+=4;\n\t\tcontinue;\n\t}\n---\n\tSystem.out.print(i);\n    }"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "The <code>continue</code> statement skips the current iteration of a <code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the <code>for loop</code> that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use <code>zero</code> indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop <code>i</code> = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value <code>1</code>!\n<br><br>Next comes the <code>if</code> statement. This tests if the element at <code>i</code> is equal to <code>2</code>. Don't forget that <code>i</code> is still equal to <code>0</code> and the value currently stored in the <code>0</code> element is <code>1</code>. <code>2</code> is not equal to <code>1</code>.  Because of this the <code>if</code> statement evaluates to <code>false</code> and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the <code>for loop</code>,  <code>i++</code> will get executed. This will increase <code>i</code> from <code>0</code> to <code>1</code>. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the <code>if</code> statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the <code>if</code> statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=4</code> is the same thing as saying <code>i = i + 4</code>. Knowing the value of <code>i</code> is currently <code>1</code>, we add <code>1 + 4</code> and store it back in <code>i</code>. This means <code>i</code> is now equal to <code>5</code>.\n<br>Next the <code>continue</code> statement gets executed. This will exit the current iteration of the <code>for loop</code>, without executing any code that may come after it, but will continue with the next iteration of loop. <code>i</code> increases by <code>1</code> to <code>6</code> and we start back at the first line of the <code>for loop</code>.\n<br>In the next line we again substitute the value for <code>i</code>. <code>myArray[6] = 6+1</code>, meaning the value stored in the 6th element of myArray is <code>7</code>. The conditional statement in the next line checks the see if the <code>6th element</code> is equal to <code>2</code>. It's not, so the code in the curly braces never gets executed and value for <code>i</code> currently <code>6</code> gets output to the console.\n<br>Currently <code>06</code> is output to the console. \n<br>This process continues, successfully, for the next <code>3</code> iterations of the <code>for loop</code>. After the current iteration <code>06789</code> is printed to the output and with <code>i</code> now <code>9</code>, the same as the length of the array, <code>9</code> the condition in the <code>for loop</code> fails and the loop terminates."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012610",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0126810",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n---\n    i+=4;\n    break;\n     }\n---\n    System.out.print(i);\n    }\n---"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "A break statement results in the termination of the statement to which it applies (switch, for, do, or while)."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements\n\n <br><code>int[] myArray = new int[10];</code>\n\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "finalize",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "finish",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "finished",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "final",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "finally",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following code:\n\n---\n    try {\t\n    int x = 5, y = 0;\n    System.out.print(x/y);\n    }\n---\n    catch (ArithmeticException ae) {\n---\n    System.out.print(\"error\");\n---\n    }\n    /*insert*/ \n---\n    {\n    System.out.print(\"success\");\n    }\n---"
    ],
    "question": [
      "What would you substitute for <code>/\\*insert\\*/</code> to output  the text \"<em style=\"color: green\">success</em>\"  to the console."
    ],
    "core": [
      "The <code>finally</code> block always executes when the try block exits."
    ],
    "explanation": [
      "The <code>finally</code> block will always be executed, even if unexpected errors within the <code>try</code> block occur.\n If your code inside the <code>try</code> or <code>catch</code> block includes a <code>return</code> statement, the code inside the <code>finally</code> block will get executed before the <code>return</code> statement.\n<br><br>A point of note, If the JVM exits while the <code>try/catch</code> block is being executed or the thread executing the <code>try/catch</code> block is killed or interrupted, the code within the <code>finally</code> block may not execute."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "output",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2",
                "$": {
                  "node": "output",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "4",
                "$": {
                  "node": "output",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "8",
                "$": {
                  "node": "output",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "1",
                "$": {
                  "node": "output",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The following is a snippet in Java :\n\n---\n    @command myDouble = 1.999f;\n---\n    int[] num = {myDouble.intValue(),2};\n---\n    System.out.print(num[0]);\n---"
    ],
    "question": [
      "What is the expected output for the above ?"
    ],
    "core": [
      "a <code> Double </code> is a <code>Number</code>, so it has the method <code>intValue </code>, which  you can then use to derive  a <code> primitive int </code>"
    ],
    "explanation": [
      "In ordeer to answer this question you would need to know than in Java , a <code> Double </code> is a <code>double-precision </code> floating point number, similar to a float but with a larger range and precision. The term Double in this instance does not double the value! \n<br>\nYou will also need to know that <code>  intValue </code>    merely returns the integer part of the Double, so for 1.999 , you'll get 1, not 2. <br>\nFinally you will need to know that <i> int[] num = {myDouble.intValue(),2} </i> is creating an array called num, you are then printing the first element in this array <i> num[0] </i> \n<br>"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "Float",
            "$": {
              "dataIndex": "1",
              "title": "command"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "protected",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "package-private",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "private-method",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "private-final",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "private",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "As part of your current project you are required that the doSomething() method is only available to other methods in the same class. No other class should be able to see or use its contents. Consider the following piece:\n\n---\n    /*insert here*/ void doSomething() {\n---\n    byte John = 21;\n---\n    boolean isTrue = false;\n---\n    if (isTrue == false) {\n---\n    System.out.println(\"John is 21\");\n---\n    }\n    }\n---"
    ],
    "question": [
      "Which of the following in place of  /\\*insert here\\*/  will guarantee that the code above is only available to the methods in the class which its defined."
    ],
    "core": [
      "The <code>private</code> access modifier allows only methods in the same class to access the private method."
    ],
    "explanation": [
      "This <code>private method</code> is only available and can only be accessed by other methods within the class which contains it. All other classes will not be able to see, or use the code within the <code>private method</code>."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "1 2 3",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2 3",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0 1",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1 2",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "run-time error",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[ ] myArray = {1,2,3} ;\n---\n     for (int i = 0; i < myArray.length;)\n     {\n    i++;\n    System.out.println(myArray[i]);\n    };\n---"
    ],
    "question": [
      "What is the expected output?"
    ],
    "core": [
      "When incrementing an integer using <code> ++ </code> as in <code> i++ </code> this will increase the  value of the integer by 1 and change the actual value of the integer."
    ],
    "explanation": [
      "<br><code>int x = i++</code>  will increase a value called <code>i</code> by 1 and store the old value in <code>x</code>.\nHere i is incremented before accessing the list.\n So it reads one element ahead everytime. Therefore a run-time error will result when the array has run out of elements.\n\n<br><br>So if the code above were to be executed,  <code>i++</code> would eventually increment <code>i</code> to a value greater than the length of the <code>array</code>. This would cause a runtime error \n<br>Ok, lets run through the code and each iteration of the loop.\n<br>Look at the <code>for loop</code>.\n<br>Now knowing what you do from the above code snippets you might now see why <code>i++</code> here might cause an error. If not it will all be come clearer soon.\n<br><code>i++ </code> increments and update the value <code>i</code> by one and check to see if its old value is equal to <code>myArray.length</code> which is <code>3</code>. If it is, execute the code between the curly braces, if not continue to the next branch in the <code>if statement</code>\n<br><code>System.out.print(toCharArray[i])</code>, all this does is print the current value stored in element <code>1</code> to the console <code>e</code>\n\n<br>Next time through the loop, again the first condition increments <code>i</code>, updates the value for <code>1</code> and checks the old value against the length of the array.\n<br>Following the above procedure <code>i</code> will eventually increment to <code>4</code> and as there is no 4th element in the array we get the <em style=\"color: green\">run time error<em>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "finish",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "close",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "end",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "terminate",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "exit",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The following piece of code, when written correctly, will terminate the program in which it belongs. \n\n---\n    System./*insert*/(0);\n---\n    System.out.println(\"This line will never be reached\");\n---"
    ],
    "question": [
      "What would you typically substitute for <b> /\\*insert here\\*/ </b>  to ensure that the line below would not be reached and that the program terminates all its activity without returning the method  and without returning an exception?"
    ],
    "core": [
      "System.exit(0); will terminate the currently running program."
    ],
    "explanation": [
      "*System.exit()* can be used to run shutdown hooks before the program quits. \n\nThis is a convenient way to handle shutdown in bigger programs, where all parts of the program can't (and shouldn't) be aware of each other. Then, if someone wants to quit, he can simply call *System.exit()*, and the *shutdown hooks* (if properly set up) take care of doing all necessary shutdown ceremonies such as closing files, releasing resources etc.\n\n\"This method never returns normally.\" means just that the method won't return; once a thread goes there, it won't come back."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr.number",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.elements",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.array_size",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.size_of",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr.length",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "You are developing a Java program for a new business. The program will need to store several objects in an **array** called **myArr**."
    ],
    "question": [
      "Which of the following code will correctly output the **number of elements** in this  array?"
    ],
    "core": [
      "The Array class in Java contains a <code>property</code> called <code>length</code>. This property stores the amount of elements the array contains."
    ],
    "explanation": [
      "The length of the array 'myArr' is set when the array is first created and is stored in a property called length. It can be accessed using .notation as follows \"myArr.length\"\n<br>To guarantee it prints to a new line we use the System.Out.Println() method.\n<br>If the question asked to print the output to the same line then the System.Out.Print() would be used instead."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "do/output",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "first/then",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "if/finally",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "run/lastly",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "try/catch",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Conside the following piece of code:\n\n---\n    /*A*/ {\t\n    int x = 5, y = 0;\n---\n    System.out.println(x/y);\n---\n    }\n    /*B*/ (ArithmeticException ae) {\n\tSystem.out.println(\"error\");\n---\n    }\n---"
    ],
    "question": [
      "Which of the following would you substitute for <code>/\\*A\\*/</code> and <code>/\\*B\\*/</code> to ensure that the code : `System.out.println( )` is executed and that  the string **error** then  prints to the console?"
    ],
    "core": [
      "The Java <code>try</code> block is used to enclose code that might throw an exception. The Java <code>catch</code> block is then  used to <code>handle</code> the Exception."
    ],
    "explanation": [
      "Run-time errors in Java are called exceptions, and the process for handling these errors is called exception handling. Code that may produce errors must be placed in a <code>try/catch</code> block.<br>\n<code>try</code>, tells the compiler, <code>try</code> to execute the code between the curly braces, but if something happens, <code>catch</code> the error and execute the code that will deal with it.\n<br>\nDifferent exceptions will be thrown for different type of errors. If the <code>catch</code> block exists in the program for this particular type of an error, it will be caught and the program will jump into the <code>catch</code> block to execute the code located there. The program will stay alive, and this exception is considered to be taken care of."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "4",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "3",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The **binarySearch method** allows you to search for a value within an array and return its element.\nConsider the following array :\n\n---\n    int [  ] myArray = {1,2,3} \n---"
    ],
    "question": [
      "What would you insert into \n\n---\n     BinarySearch ( int[ ] myArray  , /*insert*/ ) \n---\nto return **-1**"
    ],
    "core": [
      "The <code>binarySearch</code> method returns a <code>-1</code> if the element is not found"
    ],
    "explanation": [
      "The correct format for the binarySearch method <pre>binarySearch(int [ ] arr, int keySearchFor);</pre>\n\nThis method returns index of the search key, if it is contained in the array, else it returns (-(insertion point) - 1). The insertion point is the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "base",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "parent",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "top",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "original",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "super",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    public class test {\n    public static void main(String[] args) {\n    System.out.println(new childClass().num2);\n---\n    }\n    }\n    class parentClass{\n    int num1 = 21;\n---\n    }\n    class childClass extends parentClass{\n    int num1 = 32;\n---\n    int num2 = /*A*/  num1\n---\n     }\n---"
    ],
    "question": [
      "Which of the following keywords would you input for <code>/\\*A\\*/</code>, in the code snippet above to ensure that the resultant output  prints the number  <code>21</code> to the console?"
    ],
    "core": [
      "The <code>super</code> keyword is used inside a derived, or child class to access methods and variables defined in the parent, or <code>super</code> class."
    ],
    "explanation": [
      "In the above code snippet we have the same variable <code>num1</code> declared in both parent class and child class. There is no way we can access the <code>num1</code> variable of parent class without using <code>super</code> keyword."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The equals() method will check if the contents of one String or Integer is equal to another."
    ],
    "explanation": [
      "It does this by comparing the actual contents of the Strings or Integers, unlike the == operator which checks to see if the reference values are the same. In the above code we create an Integer and two String . In the print statement we check to see if the contents of lastName are equal to \"regNum.toString().length()\". This will return false because \"regNum.toString().length()\" will return the String \"4\" and lastName will return the String \"Johnson\". There is also an equalsIgnoreCase() method which will only take a String. This method will check to see if the contenst of two Strings are equal regardless of type case. \n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "equals(regNum.toString().",
            "$": {
              "dataIndex": "1",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The substring() method has two variants that will return a new String."
    ],
    "explanation": [
      "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3)); </pre> This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "substring(4)",
            "$": {
              "dataIndex": "5",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The length() method returns the length of the String that it is invoked on"
    ],
    "explanation": [
      "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3));  This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "length()",
            "$": {
              "dataIndex": "2",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n ---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The replace() method has two variations that remove either characters or substrings and return a new String."
    ],
    "explanation": [
      "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\"."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "replace(\"firstName\",\"\")",
            "$": {
              "dataIndex": "3",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              },
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The replace() method has two variations that remove either characters or substrings and return a new String."
    ],
    "explanation": [
      "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\"."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "replace(\"firstName\",\"\")",
            "$": {
              "dataIndex": "3",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "true",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The isEmpty() method returns true if, and only if, the length is equal to 0."
    ],
    "explanation": [
      "There are two variations of this method. The first variation takes two parameters. The first is the String we wish to look for and the second is the point in the String at which we want to begin looking. An example of this is: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\",3)); </pre> This will return false because although lastName begins with \"Jo\" we start looking at index 3, which is the fourth letter (Dont forget index's start at 0). If we had searched for \"ns\" in place of \"Jo\" it would have returned true. The second variation takes only a single parameter and this is the String we are searching for. When only one parameter is given it automatically starts searching at index 0. An example of this would be: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\")); </pre> This would return true."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "startsWith(\"Jo\")",
            "$": {
              "dataIndex": "4",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[myArr.length]",
                "$": {
                  "node": "Options",
                  "item": "6",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.lastIndex]",
                "$": {
                  "node": "Options",
                  "item": "7",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.lastIndex-1]",
                "$": {
                  "node": "Options",
                  "item": "8",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length()-1]",
                "$": {
                  "node": "Options",
                  "item": "9",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>last</code>",
            "$": {
              "dataIndex": "4",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int).8)]",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>1st</code>",
            "$": {
              "dataIndex": "0",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>3rd</code>",
            "$": {
              "dataIndex": "2",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr[(int)2.6)]",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[myArr.length-1]",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr[(int)1.3)]",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr<(int).4.2)>",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr[(int)3.8)]",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>"
    ],
    "question": [
      "Which of the following options will access the @questions element in the array?"
    ],
    "core": [
      "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero."
    ],
    "explanation": [
      "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br>Please click image button below to view image"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "<code>4th</code>",
            "$": {
              "dataIndex": "3",
              "title": "questions"
            }
          }
        ]
      }
    ],
    "images": [
      "../../../img/question_related_images/one_diamentional-array.png"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "1,0,0",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0,1,0",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0,1,1",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1,1,0",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0,0,1",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Java enables you  to copy parts of one array into another .\nConsider the following code \n\n---\n    int [  ]  first = {1,2,3,4,5}\n---\n    int [  ]  second = new int[5] \n---\n    System.arraycopy( first, /*A*/, second, /*B*/,  /*C*/) \n---"
    ],
    "question": [
      "What would you insert instead of **/\\*A\\*/**, **/\\*B\\*/**  and  **/\\*C\\*/** to achieve an array called  **second**   that contains the array :  <b>[1, 0, 0, 0, 0]</b>"
    ],
    "core": [
      "The correct format for the **arraycopy** method is **arraycopy(Object src, int srcPos, Obj dest, int destPos, int ammountToCopy);"
    ],
    "explanation": [
      "<br><br>Lets consider what this means.\n<br>Firstly we create the <code>arraycopy()</code> method. This method takes 5 parameters. <code>Obj src, int srcPos, Obj dest, int destPos, int ammountToCopy</code>\n<br><br><code>Obj src</code> is the array name you wish to copy elements from.\n<br><code>int srcPos</code>  is the position you wish to start copying elements from. Remember that arrays use zero indexing so if we wished to start copying from the first element then <code>int srcPos = 1</code>\n<br><code>Obj dest</code>  is the array that you wish to copy elements too.\n<br><code>int destPos</code>  indicates the starting position you will copy too in the destination array.\n<br><code>int ammountToCopy</code> indicates the number of elements to copy."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012610",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0126810",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n    i+=4;\n    break;\n    }\n---\n    System.out.print(i);\n    }\n---"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "A <code>break</code> keyword results in the termination of the statement to which it applies (<code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop)."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01789",
                "$": {
                  "node": "Options",
                  "item": "6",
                  "dataIndex": "0"
                }
              },
              {
                "_": "16789",
                "$": {
                  "node": "Options",
                  "item": "7",
                  "dataIndex": "0"
                }
              },
              {
                "_": "12789",
                "$": {
                  "node": "Options",
                  "item": "8",
                  "dataIndex": "0"
                }
              },
              {
                "_": "12789",
                "$": {
                  "node": "Options",
                  "item": "9",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "06789",
                "$": {
                  "node": "Options",
                  "item": "5",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n\tmyArray[i] = i+1;\n\tif(myArray[i] == 2) {\n\t\ti+=4;\n\t\tcontinue;\n\t}\n---\n\tSystem.out.print(i);\n    }"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "The <code>continue</code> statement skips the current iteration of a <code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the <code>for loop</code> that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use <code>zero</code> indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop <code>i</code> = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value <code>1</code>!\n<br><br>Next comes the <code>if</code> statement. This tests if the element at <code>i</code> is equal to <code>2</code>. Don't forget that <code>i</code> is still equal to <code>0</code> and the value currently stored in the <code>0</code> element is <code>1</code>. <code>2</code> is not equal to <code>1</code>.  Because of this the <code>if</code> statement evaluates to <code>false</code> and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the <code>for loop</code>,  <code>i++</code> will get executed. This will increase <code>i</code> from <code>0</code> to <code>1</code>. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the <code>if</code> statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the <code>if</code> statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=4</code> is the same thing as saying <code>i = i + 4</code>. Knowing the value of <code>i</code> is currently <code>1</code>, we add <code>1 + 4</code> and store it back in <code>i</code>. This means <code>i</code> is now equal to <code>5</code>.\n<br>Next the <code>continue</code> statement gets executed. This will exit the current iteration of the <code>for loop</code>, without executing any code that may come after it, but will continue with the next iteration of loop. <code>i</code> increases by <code>1</code> to <code>6</code> and we start back at the first line of the <code>for loop</code>.\n<br>In the next line we again substitute the value for <code>i</code>. <code>myArray[6] = 6+1</code>, meaning the value stored in the 6th element of myArray is <code>7</code>. The conditional statement in the next line checks the see if the <code>6th element</code> is equal to <code>2</code>. It's not, so the code in the curly braces never gets executed and value for <code>i</code> currently <code>6</code> gets output to the console.\n<br>Currently <code>06</code> is output to the console. \n<br>This process continues, successfully, for the next <code>3</code> iterations of the <code>for loop</code>. After the current iteration <code>06789</code> is printed to the output and with <code>i</code> now <code>9</code>, the same as the length of the array, <code>9</code> the condition in the <code>for loop</code> fails and the loop terminates."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "01",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "012610",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0126810",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n---\n    i+=4;\n    break;\n     }\n---\n    System.out.print(i);\n    }\n---"
    ],
    "question": [
      "What will be the outcome?"
    ],
    "core": [
      "A break statement results in the termination of the statement to which it applies (switch, for, do, or while)."
    ],
    "explanation": [
      "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements\n\n <br><code>int[] myArray = new int[10];</code>\n\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "finalize",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "finish",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "finished",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "final",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "finally",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following code:\n\n---\n    try {\t\n    int x = 5, y = 0;\n    System.out.print(x/y);\n    }\n---\n    catch (ArithmeticException ae) {\n---\n    System.out.print(\"error\");\n---\n    }\n    /*insert*/ \n---\n    {\n    System.out.print(\"success\");\n    }\n---"
    ],
    "question": [
      "What would you substitute for <code>/\\*insert\\*/</code> to output  the text \"<em style=\"color: green\">success</em>\"  to the console."
    ],
    "core": [
      "The <code>finally</code> block always executes when the try block exits."
    ],
    "explanation": [
      "The <code>finally</code> block will always be executed, even if unexpected errors within the <code>try</code> block occur.\n If your code inside the <code>try</code> or <code>catch</code> block includes a <code>return</code> statement, the code inside the <code>finally</code> block will get executed before the <code>return</code> statement.\n<br><br>A point of note, If the JVM exits while the <code>try/catch</code> block is being executed or the thread executing the <code>try/catch</code> block is killed or interrupted, the code within the <code>finally</code> block may not execute."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "output",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2",
                "$": {
                  "node": "output",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "4",
                "$": {
                  "node": "output",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "8",
                "$": {
                  "node": "output",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "1",
                "$": {
                  "node": "output",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The following is a snippet in Java :\n\n---\n    @command myDouble = 1.999f;\n---\n    int[] num = {myDouble.intValue(),2};\n---\n    System.out.print(num[0]);\n---"
    ],
    "question": [
      "What is the expected output for the above ?"
    ],
    "core": [
      "a <code> Double </code> is a <code>Number</code>, so it has the method <code>intValue </code>, which  you can then use to derive  a <code> primitive int </code>"
    ],
    "explanation": [
      "In ordeer to answer this question you would need to know than in Java , a <code> Double </code> is a <code>double-precision </code> floating point number, similar to a float but with a larger range and precision. The term Double in this instance does not double the value! \n<br>\nYou will also need to know that <code>  intValue </code>    merely returns the integer part of the Double, so for 1.999 , you'll get 1, not 2. <br>\nFinally you will need to know that <i> int[] num = {myDouble.intValue(),2} </i> is creating an array called num, you are then printing the first element in this array <i> num[0] </i> \n<br>"
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "Float",
            "$": {
              "dataIndex": "1",
              "title": "command"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "protected",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "package-private",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "private-method",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "private-final",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "private",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "As part of your current project you are required that the doSomething() method is only available to other methods in the same class. No other class should be able to see or use its contents. Consider the following piece:\n\n---\n    /*insert here*/ void doSomething() {\n---\n    byte John = 21;\n---\n    boolean isTrue = false;\n---\n    if (isTrue == false) {\n---\n    System.out.println(\"John is 21\");\n---\n    }\n    }\n---"
    ],
    "question": [
      "Which of the following in place of  /\\*insert here\\*/  will guarantee that the code above is only available to the methods in the class which its defined."
    ],
    "core": [
      "The <code>private</code> access modifier allows only methods in the same class to access the private method."
    ],
    "explanation": [
      "This <code>private method</code> is only available and can only be accessed by other methods within the class which contains it. All other classes will not be able to see, or use the code within the <code>private method</code>."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "1 2 3",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2 3",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "0 1",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1 2",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "run-time error",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    int[ ] myArray = {1,2,3} ;\n---\n     for (int i = 0; i < myArray.length;)\n     {\n    i++;\n    System.out.println(myArray[i]);\n    };\n---"
    ],
    "question": [
      "What is the expected output?"
    ],
    "core": [
      "When incrementing an integer using <code> ++ </code> as in <code> i++ </code> this will increase the  value of the integer by 1 and change the actual value of the integer."
    ],
    "explanation": [
      "<br><code>int x = i++</code>  will increase a value called <code>i</code> by 1 and store the old value in <code>x</code>.\nHere i is incremented before accessing the list.\n So it reads one element ahead everytime. Therefore a run-time error will result when the array has run out of elements.\n\n<br><br>So if the code above were to be executed,  <code>i++</code> would eventually increment <code>i</code> to a value greater than the length of the <code>array</code>. This would cause a runtime error \n<br>Ok, lets run through the code and each iteration of the loop.\n<br>Look at the <code>for loop</code>.\n<br>Now knowing what you do from the above code snippets you might now see why <code>i++</code> here might cause an error. If not it will all be come clearer soon.\n<br><code>i++ </code> increments and update the value <code>i</code> by one and check to see if its old value is equal to <code>myArray.length</code> which is <code>3</code>. If it is, execute the code between the curly braces, if not continue to the next branch in the <code>if statement</code>\n<br><code>System.out.print(toCharArray[i])</code>, all this does is print the current value stored in element <code>1</code> to the console <code>e</code>\n\n<br>Next time through the loop, again the first condition increments <code>i</code>, updates the value for <code>1</code> and checks the old value against the length of the array.\n<br>Following the above procedure <code>i</code> will eventually increment to <code>4</code> and as there is no 4th element in the array we get the <em style=\"color: green\">run time error<em>"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "finish",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "close",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "end",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "terminate",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "exit",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The following piece of code, when written correctly, will terminate the program in which it belongs. \n\n---\n    System./*insert*/(0);\n---\n    System.out.println(\"This line will never be reached\");\n---"
    ],
    "question": [
      "What would you typically substitute for <b> /\\*insert here\\*/ </b>  to ensure that the line below would not be reached and that the program terminates all its activity without returning the method  and without returning an exception?"
    ],
    "core": [
      "System.exit(0); will terminate the currently running program."
    ],
    "explanation": [
      "*System.exit()* can be used to run shutdown hooks before the program quits. \n\nThis is a convenient way to handle shutdown in bigger programs, where all parts of the program can't (and shouldn't) be aware of each other. Then, if someone wants to quit, he can simply call *System.exit()*, and the *shutdown hooks* (if properly set up) take care of doing all necessary shutdown ceremonies such as closing files, releasing resources etc.\n\n\"This method never returns normally.\" means just that the method won't return; once a thread goes there, it won't come back."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "myArr.number",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.elements",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.array_size",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "myArr.size_of",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "myArr.length",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "You are developing a Java program for a new business. The program will need to store several objects in an **array** called **myArr**."
    ],
    "question": [
      "Which of the following code will correctly output the **number of elements** in this  array?"
    ],
    "core": [
      "The Array class in Java contains a <code>property</code> called <code>length</code>. This property stores the amount of elements the array contains."
    ],
    "explanation": [
      "The length of the array 'myArr' is set when the array is first created and is stored in a property called length. It can be accessed using .notation as follows \"myArr.length\"\n<br>To guarantee it prints to a new line we use the System.Out.Println() method.\n<br>If the question asked to print the output to the same line then the System.Out.Print() would be used instead."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "do/output",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "first/then",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "if/finally",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "run/lastly",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "try/catch",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Conside the following piece of code:\n\n---\n    /*A*/ {\t\n    int x = 5, y = 0;\n---\n    System.out.println(x/y);\n---\n    }\n    /*B*/ (ArithmeticException ae) {\n\tSystem.out.println(\"error\");\n---\n    }\n---"
    ],
    "question": [
      "Which of the following would you substitute for <code>/\\*A\\*/</code> and <code>/\\*B\\*/</code> to ensure that the code : `System.out.println( )` is executed and that  the string **error** then  prints to the console?"
    ],
    "core": [
      "The Java <code>try</code> block is used to enclose code that might throw an exception. The Java <code>catch</code> block is then  used to <code>handle</code> the Exception."
    ],
    "explanation": [
      "Run-time errors in Java are called exceptions, and the process for handling these errors is called exception handling. Code that may produce errors must be placed in a <code>try/catch</code> block.<br>\n<code>try</code>, tells the compiler, <code>try</code> to execute the code between the curly braces, but if something happens, <code>catch</code> the error and execute the code that will deal with it.\n<br>\nDifferent exceptions will be thrown for different type of errors. If the <code>catch</code> block exists in the program for this particular type of an error, it will be caught and the program will jump into the <code>catch</code> block to execute the code located there. The program will stay alive, and this exception is considered to be taken care of."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "4",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "2",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "1",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              },
              {
                "_": "3",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "0",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "The **binarySearch method** allows you to search for a value within an array and return its element.\nConsider the following array :\n\n---\n    int [  ] myArray = {1,2,3} \n---"
    ],
    "question": [
      "What would you insert into \n\n---\n     BinarySearch ( int[ ] myArray  , /*insert*/ ) \n---\nto return **-1**"
    ],
    "core": [
      "The <code>binarySearch</code> method returns a <code>-1</code> if the element is not found"
    ],
    "explanation": [
      "The correct format for the binarySearch method <pre>binarySearch(int [ ] arr, int keySearchFor);</pre>\n\nThis method returns index of the search key, if it is contained in the array, else it returns (-(insertion point) - 1). The insertion point is the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key"
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "base",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "parent",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "top",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "original",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "super",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "Consider the following Java code snippet:\n\n---\n    public class test {\n    public static void main(String[] args) {\n    System.out.println(new childClass().num2);\n---\n    }\n    }\n    class parentClass{\n    int num1 = 21;\n---\n    }\n    class childClass extends parentClass{\n    int num1 = 32;\n---\n    int num2 = /*A*/  num1\n---\n     }\n---"
    ],
    "question": [
      "Which of the following keywords would you input for <code>/\\*A\\*/</code>, in the code snippet above to ensure that the resultant output  prints the number  <code>21</code> to the console?"
    ],
    "core": [
      "The <code>super</code> keyword is used inside a derived, or child class to access methods and variables defined in the parent, or <code>super</code> class."
    ],
    "explanation": [
      "In the above code snippet we have the same variable <code>num1</code> declared in both parent class and child class. There is no way we can access the <code>num1</code> variable of parent class without using <code>super</code> keyword."
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  },
  {
    "options": [
      {
        "incorrectAnswers": [
          {
            "incorrectAnswer": [
              {
                "_": "false",
                "$": {
                  "node": "Options",
                  "item": "1",
                  "dataIndex": "0"
                }
              },
              {
                "_": "John",
                "$": {
                  "node": "Options",
                  "item": "2",
                  "dataIndex": "0"
                }
              },
              {
                "_": "7",
                "$": {
                  "node": "Options",
                  "item": "3",
                  "dataIndex": "0"
                }
              },
              {
                "_": "son",
                "$": {
                  "node": "Options",
                  "item": "4",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ],
        "correctAnswers": [
          {
            "correctAnswer": [
              {
                "_": "Johnson",
                "$": {
                  "node": "Options",
                  "item": "0",
                  "dataIndex": "0"
                }
              }
            ]
          }
        ]
      }
    ],
    "background": [
      "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---"
    ],
    "question": [
      "What is the correct output for the code shown above?"
    ],
    "core": [
      "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object."
    ],
    "explanation": [
      "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on."
    ],
    "Related_Data_1": [
      {
        "item": [
          {
            "_": "toString()",
            "$": {
              "dataIndex": "0",
              "title": "method"
            }
          }
        ]
      }
    ]
  }
]
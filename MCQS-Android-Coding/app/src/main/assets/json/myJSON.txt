
[

  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n\tmyArray[i] = i+1;\n\tif(myArray[i] == 2) {\n\t\ti+=4;\n\t\tcontinue;\n\t}\n---\n\tSystem.out.print(i);\n    }",
    "question": "What will be the outcome?",
    "core": "The <code>continue</code> statement skips the current iteration of a <code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop.",
    "explanation": "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the <code>for loop</code> that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use <code>zero</code> indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop <code>i</code> = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value <code>1</code>!\n<br><br>Next comes the <code>if</code> statement. This tests if the element at <code>i</code> is equal to <code>2</code>. Don't forget that <code>i</code> is still equal to <code>0</code> and the value currently stored in the <code>0</code> element is <code>1</code>. <code>2</code> is not equal to <code>1</code>.  Because of this the <code>if</code> statement evaluates to <code>false</code> and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the <code>for loop</code>,  <code>i++</code> will get executed. This will increase <code>i</code> from <code>0</code> to <code>1</code>. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the <code>if</code> statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the <code>if</code> statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=4</code> is the same thing as saying <code>i = i + 4</code>. Knowing the value of <code>i</code> is currently <code>1</code>, we add <code>1 + 4</code> and store it back in <code>i</code>. This means <code>i</code> is now equal to <code>5</code>.\n<br>Next the <code>continue</code> statement gets executed. This will exit the current iteration of the <code>for loop</code>, without executing any code that may come after it, but will continue with the next iteration of loop. <code>i</code> increases by <code>1</code> to <code>6</code> and we start back at the first line of the <code>for loop</code>.\n<br>In the next line we again substitute the value for <code>i</code>. <code>myArray[6] = 6+1</code>, meaning the value stored in the 6th element of myArray is <code>7</code>. The conditional statement in the next line checks the see if the <code>6th element</code> is equal to <code>2</code>. It's not, so the code in the curly braces never gets executed and value for <code>i</code> currently <code>6</code> gets output to the console.\n<br>Currently <code>06</code> is output to the console. \n<br>This process continues, successfully, for the next <code>3</code> iterations of the <code>for loop</code>. After the current iteration <code>06789</code> is printed to the output and with <code>i</code> now <code>9</code>, the same as the length of the array, <code>9</code> the condition in the <code>for loop</code> fails and the loop terminates.",
    "options": [
      {
        "answer": "12789",
        "correctAnswer": false
      },
      {
        "answer": "16789",
        "correctAnswer": false
      },
      {
        "answer": "01789",
        "correctAnswer": false
      },
      {
        "answer": "12789",
        "correctAnswer": false
      },
      {
        "answer": "06789",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Have a look at the following snippet \n\n---\n     CREATE TABLE animals (\n      id MEDIUMINT NOT NULL AUTO_INCREMENT,\n      name CHAR(30) NOT NULL,\n      PRIMARY KEY (id)      );\n---\n    INSERT INTO animals (name) VALUES\n    ('dog'),('cat'),('penguin'),\n    ('whale'),('ostrich');\n---",
    "question": "Which **name** would have the id value of **1** in the resultant table?",
    "core": "When you insert a new record to the table, and the auto_increment field is NULL or DEFAULT, the value will automatically be incremented from 1 by default.",
    "explanation": "The **AUTO_INCREMENT** attribute can be used to generate a unique identity for new rows. \n\n> When you insert a new record to the table, and the auto_increment field is **NULL** or **DEFAULT**, the value will automatically be incremented. \n\nThis also applies to 0, unless the NO_AUTO_VALUE_ON_ZERO SQL_MODE is enabled.\n\n> AUTO_INCREMENT columns start from 1 by default.\n\n The automatically generated value can never be lower than 0.\n\n> Each table can have only one AUTO_INCREMENT column. \n\nIt must defined as a key (not necessarily the PRIMARY KEY or UNIQUE key). If the key consists of multiple columns, the AUTO_INCREMENT column must be the first one, unless the storage engine is Aria or MyISAM.",
    "options": [
      {
        "answer": "3",
        "correctAnswer": false
      },
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "2",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": false
      },
      {
        "answer": "1",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many times in programming where it is necessary to iterate over a piece of code many times.\n    In java there are four different ways in which we can achieve this. The while loop, the do-while loop,\n    the for loop and the enhanced for loop.\n    The following code snippet shows an example of one of these loops:\n\n---\n\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n\n---\n\n    int j = myArray.length; \n\n---\n\n    while( j < 4){ System.out.print(j + \" \" ); \n\n---\n\n    j++; \n\n---\n\n    }\n\n---",
    "question": "What will be the correct output of this code snippet?",
    "core": "With a While loop the contents of the loop will only be executed if the boolean expression in the while loop is true. It is possible for a while loop to never execute",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. \n<pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> \nNext we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> \nAfter this we create a while loop to loop through myArray and output certain values of the array. <pre> while(j < 4) </pre> As long as this expression is true the while loop will continue to run. It is important to note that a while loop might never actually execute. This is the case in the code snippet above. Initially j is set to the value of 4: <pre> int j = myArray.length; </pre> Next comes the while loop. The while expression checks if j is less than 4: <pre> while(j<4) </pre> The contents of the while loop will never execute in this code snippet as the while expression will never evaluate to true because j is equal to 4. This means there will be no output from this code snippet. </pre>",
    "options": [
      {
        "answer": "3",
        "correctAnswer": false
      },
      {
        "answer": "4 5",
        "correctAnswer": false
      },
      {
        "answer": "3 4",
        "correctAnswer": false
      },
      {
        "answer": "3 4  5",
        "correctAnswer": false
      },
      {
        "answer": "No output",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    int j = myArray.length; \n---\n    do{ System.out.print(j + \" \" ); \n---\n    j++; \n---\n    }while(j<3);\n---",
    "question": "What is the expected output ?",
    "core": "With a Do-while loop the expression statement is not checked until after the loop has run. A Do-while loop is always guaranteed to execute at least once.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create a do while loop to loop through myArray and output certain values of the array. <pre> do{ System.out.print(j + \" \" ); j++; }while(j<3); </pre> In this do while loop the loop will terminate when j is no longer less than 3. However we have set the value of j to myArray.length(4) in the above code. This means that the termination expression is false.However it is important to note that a do while loop will always execute at least once because the termination expression is at the end of the loop. This means that our code snippet will output the value of j, which in this case is 4. </pre>",
    "options": [
      {
        "answer": "5 6",
        "correctAnswer": false
      },
      {
        "answer": "5",
        "correctAnswer": false
      },
      {
        "answer": "3 4",
        "correctAnswer": false
      },
      {
        "answer": "No output",
        "correctAnswer": false
      },
      {
        "answer": "4",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    int j = myArray.length; for(j = myArray.length;\n---\n    j<=5;j++){ System.out.print(j + \" \" );\n---\n    }",
    "question": "What is the expected output ?",
    "core": "A for loop is most commonly used when you know exactly how many times you want the loop to execute.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings: <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray: <pre> int j = myArray.length; </pre> After this we create a for loop to loop through myArray and output certain values of the array. There are 3 distinct parts to the declaration of the for loop. The first part is initialization expression: <pre> j = myArray.length; </pre> This sets the value of j for use inside the loop to 4, the length of myArray. This is only executed once at the start of the loop. Note that if we had not declared j earlier in the code we would need to do so in the initialization expression. For example: <pre> for(int j = myArray.length;j<=5;j++) </pre> The second part is the termination expression: <pre> j<=5; </pre> When this expression evaluates to false the loop will end. The third and final part is the increment/decrement expression: <pre> j++ </pre> This expression is executed at the end of each loop, thus increasing the value of j with each iteration of the loop. This is useful, for example, when checking the values of an array. It is also important to note that you can decrement this expression if necessary: <pre>j--</pre> To further explain this loop we will follow it's steps. On the loops first iteraton j is set to the value of myArray.length which is 4: <pre> j = myArray.length </pre> The loop then checks to see if the value of j is less than or equal to 5: <pre> j<=5; </pre> In this case it is so the loop continues. Next we print out the value of j, which is still 4: <pre> System.out.println(j + \" \"); </pre> Now we are at the end of the loop so j is incremented to 5: <pre> j++ </pre> On the loops second iteration the initialization expression is ignored as it only runs once at the start of the loop. The termination expression is the next to run. It checks to see if the value of j is less than or equal to 5: <pre> j<=5; </pre> It still is so the loop continues and prints out the value of j, which is 5: <pre> System.out.println(j + \" \"); </pre> As the loop ends j is incremented to 6: <pre> j++ </pre> On the loops third iteration the initilization expression is once again ignored. The termination expression checks to see if j is less than or equal to 5: <pre> j<=5; </pre> In this case it is not as j is now equal to 6. As the termination expression has now become false the loop will terminate. This leaves us with the output of 4 5. </pre>",
    "options": [
      {
        "answer": "5",
        "correctAnswer": false
      },
      {
        "answer": "3 4",
        "correctAnswer": false
      },
      {
        "answer": "4 5 6",
        "correctAnswer": false
      },
      {
        "answer": "No output",
        "correctAnswer": false
      },
      {
        "answer": "4 5",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    for(String names: myArray){ System.out.print(names + \" \" );\n---\n    Arrays.sort(myArray); }\n---",
    "question": "What is the expected output ?",
    "core": "Enhanced for loops are used with arrays. Their functionality is similar to a regular for loop except that you cannot define how many times you want the loop to run.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. Next we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> Now that our loop has completed the first iteration it will move on to the second iteration. Once again we will output the current value of names, which is now Darren. After this we sort the array. This has no effect at this stage however as the array has already been sorted. Now that the loop has completed its current iteration it moves on to the third iteration. In the third iteration we will once again output the current value of names. This time it will be john again. After this the array is once again sorted but with no effect and the loop ends. On the final iteration of the loop we begin by printing the current value of names which has now become Raymond. Finally the array is sorted again but as with the previous ywo iterations there is no effect. This will leave us with a final output of: John Darren John Raymond You may be wondering why Barry was never printed and john was printed twice. This is because before the first loop begins the array is unsorted and Bary is the final element in the array while John is the first. Then when the first loop begins it prints the first element which is John. Directly after this the array is sorted. This now means that Barry has become first element in the array. However because the sort() method sits inside the loop the array will not be updated until the second iteration of the loop. </pre>",
    "options": [
      {
        "answer": "Barry Darren Raymond John",
        "correctAnswer": false
      },
      {
        "answer": "John John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Barry Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Darren John Raymond",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    for(String names: myArray){ System.out.print(names + \" \");\n---\n    Arrays.sort(myArray);\n---\n    if(names == \"John\"){ break; \n---\n    } } \n---",
    "question": "What is the expected output ?",
    "core": "The break keyword is used to exit out of a loop.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. Next we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> After this we have an if statement that checks to see if the current value of names, which is John, is equal to John: <pre> if(names == \"John\") </pre> This evaluates to true so we enter the if statement. Inside the if statement is a break statement. <pre> break; </pre> This causes the loop to terminate. This leaves us with an output of John. It is important to note that when the sort method is called in a loop the array will not actually be updated until the end of that iteration. This means that although in the sorted array Barry is the first element. We will print john first because we entered the loop with John as our first element. </pre>",
    "options": [
      {
        "answer": "Barry John",
        "correctAnswer": false
      },
      {
        "answer": "John Darren John",
        "correctAnswer": false
      },
      {
        "answer": "John Darren",
        "correctAnswer": false
      },
      {
        "answer": "Barry Darren John",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Examine the following snippet: \n\n---\n\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n\n---\n\n    for(String names: myArray){ System.out.print(names + \" \");\n\n---\n\n    if(names == \"Raymond\"){ Arrays.sort(myArray); \n\n---\n\n    continue; \n\n---\n\n    } }\n\n---",
    "question": "What is the expected output?",
    "core": "The continue keyword is used to end the current iteration of the loop and immediatly start the next iteration",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. After this we have an if statement that checks to see if the current value of names, which is John, is equal to Raymond: <pre> if(names == \"Raymond\") </pre> This evaluates to false so we do not enter the if statement. On the second iteration of the loop we print the current value of names which is now Darren. After this we check to see if the current value of names, which is Darren, is equal to Raymond. This evaluates to false so we do not enter the if statement. On the third iteration of the loop we print the current value of names which is now Raymond. After this we check to see if the current value of names, which is Raymond, is equal to Raymond. This evaluates to true so we enter the if statement. The first thing we do inside the array is we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> After this comes the continue statement. <pre> continue; </pre> The continue statement is used to exit the current iteration of a loop and begin the next iteration. It is different to the break statement in that it does not actually end the loop. Next we begin the fourth and final iteration of the loop. First we print the current value of names which is once again Raymond. This is because our array has now been updated and in the updated array Raymond is the final element. After this we check to see if the current value of names is equal to Raymond. Once again this evaluates to true so we enter the if statement. We sort the array again but this has no effect as the array has already been sorted. Next comes the continue statement that breaks out of the current itration of the loop,which also happens to be the final output of the loop. This leaves us with the final output of: John Darren Raymon Raymond It is important to note that when the sort method is called in a loop the array will not actually be updated until the end of that iteration. This means that although in the sorted array Barry is the first element. We will print john first because we entered the loop with John as our first element. </pre",
    "options": [
      {
        "answer": "Barry John Raymond Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry Darren John Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Darren Raymond Barry",
        "correctAnswer": false
      },
      {
        "answer": "John Darren Raymond Raymond",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n`myArray = new int[4];`\n`myArray[0] = 19;`\n`myArray[1] = 32;`\n`myArray[2] = 4;`\n`myArray[3] = 23;`\n        \n`for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[i] + \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 4 times. outputting the value of \"myArray[i]\" each time. This will give us a final output of 19 32 4 23. </pre>",
    "options": [
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n        \n`for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[++i]+ \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[++i]\" each time. It is important to note that \"++i\" is an example of pre-incrementation. That means that it will increment the value <b>before</b> it is displayed. The value of myArray[i] is 19 going into the loop on the first iteration but because of pre-incrementation myArray[i] becomes 32 before the print statement is executed. Similarly on the second iteration of the loop the value of myArray[i] is 4 going into the loop but once again because of pre-incrementation myArray[i] becomes 32 before the print staetment is executed. This will give us a final output of 32 23. </pre>",
    "options": [
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n        \n`for(int i=0;i<4;i++){ System.out.print(myArray[i++]+ \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[i++]\" each time. It is important to note that \"i++\" is an example of post-incrementation. That means that it will increment the value <b>after</b> it is displayed. The value of myArray[i] is 19 going into the loop on the first iteration and is printed as such. However i incremented directly after the print statement is executed making the value of myArray[i] 32. i is the incremented again at the end of the first iteration of the loop via the iteration expression making the value of myArray[i] 4. On the second iteration of the loop the value of myArray[i] is 4 going into the loop and is once again printed as such. i is incremented directly after the print statement is executed making myArray[i] 23. This will give us a final output of 19 4. </pre>",
    "options": [
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n\n`Arrays.sort(myArray); for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[i] + \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. Next we use the Arrays.sort method on myArray. This will sort the array alphanumerically. It is important to note that to use this method it must be imported. This can be done by adding the following line at the very beggining of your java file. <pre>import java.util.Arrays;</pre> The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 4 times. outputting the value of \"myArray[i]\" each time. This will give us a final output of 19 32 4 23. </pre>",
    "options": [
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n        \n`Arrays.sort(myArray); for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[++i] + \" \");`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. Next we use the Arrays.sort method on myArray. This will sort the array alphanumerically. It is important to note that to use this method it must be imported. This can be done by adding the following line at the very beggining of your java file. <pre>import java.util.Arrays;</pre> The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[++i]\" each time. It is important to note that \"++i\" is an example of pre-incrementation. That means that it will increment the value <b>before</b> it is displayed. The value of myArray[i] is 4 going into the loop on the first iteration but because of pre-incrementation myArray[i] becomes 19 before the print statement is executed. Similarly on the second iteration of the loop the value of myArray[i] is 23 going into the loop but once again because of pre-incrementation myArray[i] becomes 32 before the print staetment is executed. This will give us a final output of 19 32. </pre>",
    "options": [
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n\n        \n`Arrays.sort(myArray); `\n`for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[i++] + \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. Next we use the Arrays.sort method on myArray. This will sort the array alphanumerically. It is important to note that to use this method it must be imported. This can be done by adding the following line at the very beggining of your java file. <pre>import java.util.Arrays;</pre> The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[i++]\" each time. It is important to note that \"i++\" is an example of post-incrementation. That means that it will increment the value <b>after</b> it is displayed. The value of myArray[i] is 4 going into the loop on the first iteration and is printed as such. However i is incremented directly after the print statement is executed making the value of myArray[i] 19. i is the incremented again at the end of the first iteration of the loop via the iteration expression making the value of myArray[i] 23. On the second iteration of the loop the value of myArray[i] is 23 going into the loop and is once again printed as such. i is incremented directly after the print statement is executed making myArray[i] 32. This will give us a final output of 4 23. </pre>",
    "options": [
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr[(int)1.3)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr<(int).4.2)>",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)3.8)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.length-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)2.6)]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr<(int).4.2)>",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)2.6)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)1.3)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)3.8)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int).8)]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr[myArr.length]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.lastIndex]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.lastIndex-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.length()-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.length-1]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr[(int)1.3)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr<(int).4.2)>",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.length-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)2.6)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)3.8)]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n\n---\n\n`Integer regNum = 4511;`\n\n---\n\n`String firstName = \"John\";`\n\n---\n\n`String lastName = \"Johnson\";`\n\n---\n\n`System.out.print(lastName.@method );`\n\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The equals() method will check if the contents of one String or Integer is equal to another.",
    "explanation": "It does this by comparing the actual contents of the Strings or Integers, unlike the == operator which checks to see if the reference values are the same. In the above code we create an Integer and two String . In the print statement we check to see if the contents of lastName are equal to \"regNum.toString().length()\". This will return false because \"regNum.toString().length()\" will return the String \"4\" and lastName will return the String \"Johnson\". There is also an equalsIgnoreCase() method which will only take a String. This method will check to see if the contenst of two Strings are equal regardless of type case. \n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The substring() method has two variants that will return a new String.",
    "explanation": "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3)); </pre> This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The length() method returns the length of the String that it is invoked on",
    "explanation": "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3));  This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring.",
    "options": [
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n ---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The replace() method has two variations that remove either characters or substrings and return a new String.",
    "explanation": "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\".",
    "options": [
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The replace() method has two variations that remove either characters or substrings and return a new String.",
    "explanation": "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\".",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The isEmpty() method returns true if, and only if, the length is equal to 0.",
    "explanation": "There are two variations of this method. The first variation takes two parameters. The first is the String we wish to look for and the second is the point in the String at which we want to begin looking. An example of this is: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\",3)); </pre> This will return false because although lastName begins with \"Jo\" we start looking at index 3, which is the fourth letter (Dont forget index's start at 0). If we had searched for \"ns\" in place of \"Jo\" it would have returned true. The second variation takes only a single parameter and this is the String we are searching for. When only one parameter is given it automatically starts searching at index 0. An example of this would be: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\")); </pre> This would return true.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Java enables you  to copy parts of one array into another .\nConsider the following code \n\n---\n    int [  ]  first = {1,2,3,4,5}\n---\n    int [  ]  second = new int[5] \n---\n    System.arraycopy( first, /*A*/, second, /*B*/,  /*C*/) \n---",
    "question": "What would you insert instead of **/\\*A\\*/**, **/\\*B\\*/**  and  **/\\*C\\*/** to achieve an array called  **second**   that contains the array :  <b>[1, 0, 0, 0, 0]</b>",
    "core": "The correct format for the **arraycopy** method is **arraycopy(Object src, int srcPos, Obj dest, int destPos, int ammountToCopy);",
    "explanation": "<br><br>Lets consider what this means.\n<br>Firstly we create the <code>arraycopy()</code> method. This method takes 5 parameters. <code>Obj src, int srcPos, Obj dest, int destPos, int ammountToCopy</code>\n<br><br><code>Obj src</code> is the array name you wish to copy elements from.\n<br><code>int srcPos</code>  is the position you wish to start copying elements from. Remember that arrays use zero indexing so if we wished to start copying from the first element then <code>int srcPos = 1</code>\n<br><code>Obj dest</code>  is the array that you wish to copy elements too.\n<br><code>int destPos</code>  indicates the starting position you will copy too in the destination array.\n<br><code>int ammountToCopy</code> indicates the number of elements to copy.",
    "options": [
      {
        "answer": "0,1,0",
        "correctAnswer": false
      },
      {
        "answer": "1,0,0",
        "correctAnswer": false
      },
      {
        "answer": "1,1,0",
        "correctAnswer": false
      },
      {
        "answer": "0,1,1",
        "correctAnswer": false
      },
      {
        "answer": "0,0,1",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n    i+=4;\n    break;\n    }\n---\n    System.out.print(i);\n    }\n---",
    "question": "What will be the outcome?",
    "core": "A <code>break</code> keyword results in the termination of the statement to which it applies (<code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop).",
    "explanation": "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>",
    "options": [
      {
        "answer": "0126810",
        "correctAnswer": false
      },
      {
        "answer": "012",
        "correctAnswer": false
      },
      {
        "answer": "012610",
        "correctAnswer": false
      },
      {
        "answer": "01",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n\tmyArray[i] = i+1;\n\tif(myArray[i] == 2) {\n\t\ti+=4;\n\t\tcontinue;\n\t}\n---\n\tSystem.out.print(i);\n    }",
    "question": "What will be the outcome?",
    "core": "The <code>continue</code> statement skips the current iteration of a <code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop.",
    "explanation": "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the <code>for loop</code> that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use <code>zero</code> indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop <code>i</code> = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value <code>1</code>!\n<br><br>Next comes the <code>if</code> statement. This tests if the element at <code>i</code> is equal to <code>2</code>. Don't forget that <code>i</code> is still equal to <code>0</code> and the value currently stored in the <code>0</code> element is <code>1</code>. <code>2</code> is not equal to <code>1</code>.  Because of this the <code>if</code> statement evaluates to <code>false</code> and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the <code>for loop</code>,  <code>i++</code> will get executed. This will increase <code>i</code> from <code>0</code> to <code>1</code>. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the <code>if</code> statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the <code>if</code> statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=4</code> is the same thing as saying <code>i = i + 4</code>. Knowing the value of <code>i</code> is currently <code>1</code>, we add <code>1 + 4</code> and store it back in <code>i</code>. This means <code>i</code> is now equal to <code>5</code>.\n<br>Next the <code>continue</code> statement gets executed. This will exit the current iteration of the <code>for loop</code>, without executing any code that may come after it, but will continue with the next iteration of loop. <code>i</code> increases by <code>1</code> to <code>6</code> and we start back at the first line of the <code>for loop</code>.\n<br>In the next line we again substitute the value for <code>i</code>. <code>myArray[6] = 6+1</code>, meaning the value stored in the 6th element of myArray is <code>7</code>. The conditional statement in the next line checks the see if the <code>6th element</code> is equal to <code>2</code>. It's not, so the code in the curly braces never gets executed and value for <code>i</code> currently <code>6</code> gets output to the console.\n<br>Currently <code>06</code> is output to the console. \n<br>This process continues, successfully, for the next <code>3</code> iterations of the <code>for loop</code>. After the current iteration <code>06789</code> is printed to the output and with <code>i</code> now <code>9</code>, the same as the length of the array, <code>9</code> the condition in the <code>for loop</code> fails and the loop terminates.",
    "options": [
      {
        "answer": "12789",
        "correctAnswer": false
      },
      {
        "answer": "01789",
        "correctAnswer": false
      },
      {
        "answer": "16789",
        "correctAnswer": false
      },
      {
        "answer": "12789",
        "correctAnswer": false
      },
      {
        "answer": "06789",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n---\n    i+=4;\n    break;\n     }\n---\n    System.out.print(i);\n    }\n---",
    "question": "What will be the outcome?",
    "core": "A break statement results in the termination of the statement to which it applies (switch, for, do, or while).",
    "explanation": "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements\n\n <br><code>int[] myArray = new int[10];</code>\n\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>",
    "options": [
      {
        "answer": "01",
        "correctAnswer": false
      },
      {
        "answer": "012610",
        "correctAnswer": false
      },
      {
        "answer": "0126810",
        "correctAnswer": false
      },
      {
        "answer": "012",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following code:\n\n---\n    try {\t\n    int x = 5, y = 0;\n    System.out.print(x/y);\n    }\n---\n    catch (ArithmeticException ae) {\n---\n    System.out.print(\"error\");\n---\n    }\n    /*insert*/ \n---\n    {\n    System.out.print(\"success\");\n    }\n---",
    "question": "What would you substitute for <code>/\\*insert\\*/</code> to output  the text \"<em style=\"color: green\">success</em>\"  to the console.",
    "core": "The <code>finally</code> block always executes when the try block exits.",
    "explanation": "The <code>finally</code> block will always be executed, even if unexpected errors within the <code>try</code> block occur.\n If your code inside the <code>try</code> or <code>catch</code> block includes a <code>return</code> statement, the code inside the <code>finally</code> block will get executed before the <code>return</code> statement.\n<br><br>A point of note, If the JVM exits while the <code>try/catch</code> block is being executed or the thread executing the <code>try/catch</code> block is killed or interrupted, the code within the <code>finally</code> block may not execute.",
    "options": [
      {
        "answer": "finished",
        "correctAnswer": false
      },
      {
        "answer": "finish",
        "correctAnswer": false
      },
      {
        "answer": "final",
        "correctAnswer": false
      },
      {
        "answer": "finalize",
        "correctAnswer": false
      },
      {
        "answer": "finally",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "The following is a snippet in Java :\n\n---\n    @command myDouble = 1.999f;\n---\n    int[] num = {myDouble.intValue(),2};\n---\n    System.out.print(num[0]);\n---",
    "question": "What is the expected output for the above ?",
    "core": "a <code> Double </code> is a <code>Number</code>, so it has the method <code>intValue </code>, which  you can then use to derive  a <code> primitive int </code>",
    "explanation": "In ordeer to answer this question you would need to know than in Java , a <code> Double </code> is a <code>double-precision </code> floating point number, similar to a float but with a larger range and precision. The term Double in this instance does not double the value! \n<br>\nYou will also need to know that <code>  intValue </code>    merely returns the integer part of the Double, so for 1.999 , you'll get 1, not 2. <br>\nFinally you will need to know that <i> int[] num = {myDouble.intValue(),2} </i> is creating an array called num, you are then printing the first element in this array <i> num[0] </i> \n<br>",
    "options": [
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": false
      },
      {
        "answer": "2",
        "correctAnswer": false
      },
      {
        "answer": "8",
        "correctAnswer": false
      },
      {
        "answer": "1",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "As part of your current project you are required that the doSomething() method is only available to other methods in the same class. No other class should be able to see or use its contents. Consider the following piece:\n\n---\n    /*insert here*/ void doSomething() {\n---\n    byte John = 21;\n---\n    boolean isTrue = false;\n---\n    if (isTrue == false) {\n---\n    System.out.println(\"John is 21\");\n---\n    }\n    }\n---",
    "question": "Which of the following in place of  /\\*insert here\\*/  will guarantee that the code above is only available to the methods in the class which its defined.",
    "core": "The <code>private</code> access modifier allows only methods in the same class to access the private method.",
    "explanation": "This <code>private method</code> is only available and can only be accessed by other methods within the class which contains it. All other classes will not be able to see, or use the code within the <code>private method</code>.",
    "options": [
      {
        "answer": "protected",
        "correctAnswer": false
      },
      {
        "answer": "private-method",
        "correctAnswer": false
      },
      {
        "answer": "private-final",
        "correctAnswer": false
      },
      {
        "answer": "package-private",
        "correctAnswer": false
      },
      {
        "answer": "private",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[ ] myArray = {1,2,3} ;\n---\n     for (int i = 0; i < myArray.length;)\n     {\n    i++;\n    System.out.println(myArray[i]);\n    };\n---",
    "question": "What is the expected output?",
    "core": "When incrementing an integer using <code> ++ </code> as in <code> i++ </code> this will increase the  value of the integer by 1 and change the actual value of the integer.",
    "explanation": "<br><code>int x = i++</code>  will increase a value called <code>i</code> by 1 and store the old value in <code>x</code>.\nHere i is incremented before accessing the list.\n So it reads one element ahead everytime. Therefore a run-time error will result when the array has run out of elements.\n\n<br><br>So if the code above were to be executed,  <code>i++</code> would eventually increment <code>i</code> to a value greater than the length of the <code>array</code>. This would cause a runtime error \n<br>Ok, lets run through the code and each iteration of the loop.\n<br>Look at the <code>for loop</code>.\n<br>Now knowing what you do from the above code snippets you might now see why <code>i++</code> here might cause an error. If not it will all be come clearer soon.\n<br><code>i++ </code> increments and update the value <code>i</code> by one and check to see if its old value is equal to <code>myArray.length</code> which is <code>3</code>. If it is, execute the code between the curly braces, if not continue to the next branch in the <code>if statement</code>\n<br><code>System.out.print(toCharArray[i])</code>, all this does is print the current value stored in element <code>1</code> to the console <code>e</code>\n\n<br>Next time through the loop, again the first condition increments <code>i</code>, updates the value for <code>1</code> and checks the old value against the length of the array.\n<br>Following the above procedure <code>i</code> will eventually increment to <code>4</code> and as there is no 4th element in the array we get the <em style=\"color: green\">run time error<em>",
    "options": [
      {
        "answer": "1 2 3",
        "correctAnswer": false
      },
      {
        "answer": "2 3",
        "correctAnswer": false
      },
      {
        "answer": "0 1",
        "correctAnswer": false
      },
      {
        "answer": "1 2",
        "correctAnswer": false
      },
      {
        "answer": "run-time error",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "The following piece of code, when written correctly, will terminate the program in which it belongs. \n\n---\n    System./*insert*/(0);\n---\n    System.out.println(\"This line will never be reached\");\n---",
    "question": "What would you typically substitute for <b> /\\*insert here\\*/ </b>  to ensure that the line below would not be reached and that the program terminates all its activity without returning the method  and without returning an exception?",
    "core": "System.exit(0); will terminate the currently running program.",
    "explanation": "*System.exit()* can be used to run shutdown hooks before the program quits. \n\nThis is a convenient way to handle shutdown in bigger programs, where all parts of the program can't (and shouldn't) be aware of each other. Then, if someone wants to quit, he can simply call *System.exit()*, and the *shutdown hooks* (if properly set up) take care of doing all necessary shutdown ceremonies such as closing files, releasing resources etc.\n\n\"This method never returns normally.\" means just that the method won't return; once a thread goes there, it won't come back.",
    "options": [
      {
        "answer": "finish",
        "correctAnswer": false
      },
      {
        "answer": "end",
        "correctAnswer": false
      },
      {
        "answer": "close",
        "correctAnswer": false
      },
      {
        "answer": "terminate",
        "correctAnswer": false
      },
      {
        "answer": "exit",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "You are developing a Java program for a new business. The program will need to store several objects in an **array** called **myArr**.",
    "question": "Which of the following code will correctly output the **number of elements** in this  array?",
    "core": "The Array class in Java contains a <code>property</code> called <code>length</code>. This property stores the amount of elements the array contains.",
    "explanation": "The length of the array 'myArr' is set when the array is first created and is stored in a property called length. It can be accessed using .notation as follows \"myArr.length\"\n<br>To guarantee it prints to a new line we use the System.Out.Println() method.\n<br>If the question asked to print the output to the same line then the System.Out.Print() would be used instead.",
    "options": [
      {
        "answer": "myArr.size_of",
        "correctAnswer": false
      },
      {
        "answer": "myArr.elements",
        "correctAnswer": false
      },
      {
        "answer": "myArr.array_size",
        "correctAnswer": false
      },
      {
        "answer": "myArr.number",
        "correctAnswer": false
      },
      {
        "answer": "myArr.length",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Conside the following piece of code:\n\n---\n    /*A*/ {\t\n    int x = 5, y = 0;\n---\n    System.out.println(x/y);\n---\n    }\n    /*B*/ (ArithmeticException ae) {\n\tSystem.out.println(\"error\");\n---\n    }\n---",
    "question": "Which of the following would you substitute for <code>/\\*A\\*/</code> and <code>/\\*B\\*/</code> to ensure that the code : `System.out.println( )` is executed and that  the string **error** then  prints to the console?",
    "core": "The Java <code>try</code> block is used to enclose code that might throw an exception. The Java <code>catch</code> block is then  used to <code>handle</code> the Exception.",
    "explanation": "Run-time errors in Java are called exceptions, and the process for handling these errors is called exception handling. Code that may produce errors must be placed in a <code>try/catch</code> block.<br>\n<code>try</code>, tells the compiler, <code>try</code> to execute the code between the curly braces, but if something happens, <code>catch</code> the error and execute the code that will deal with it.\n<br>\nDifferent exceptions will be thrown for different type of errors. If the <code>catch</code> block exists in the program for this particular type of an error, it will be caught and the program will jump into the <code>catch</code> block to execute the code located there. The program will stay alive, and this exception is considered to be taken care of.",
    "options": [
      {
        "answer": "do/output",
        "correctAnswer": false
      },
      {
        "answer": "if/finally",
        "correctAnswer": false
      },
      {
        "answer": "first/then",
        "correctAnswer": false
      },
      {
        "answer": "run/lastly",
        "correctAnswer": false
      },
      {
        "answer": "try/catch",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "The **binarySearch method** allows you to search for a value within an array and return its element.\nConsider the following array :\n\n---\n    int [  ] myArray = {1,2,3} \n---",
    "question": "What would you insert into \n\n---\n     BinarySearch ( int[ ] myArray  , /*insert*/ ) \n---\nto return **-1**",
    "core": "The <code>binarySearch</code> method returns a <code>-1</code> if the element is not found",
    "explanation": "The correct format for the binarySearch method <pre>binarySearch(int [ ] arr, int keySearchFor);</pre>\n\nThis method returns index of the search key, if it is contained in the array, else it returns (-(insertion point) - 1). The insertion point is the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key",
    "options": [
      {
        "answer": "1",
        "correctAnswer": false
      },
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "3",
        "correctAnswer": false
      },
      {
        "answer": "2",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n`public class test {`\n\n`public static void main(String[] args) {`\n\n`System.out.println(new childClass().num2);`\n\n`}`\n\n`}`\n\n`class parentClass{`\n\n`ìnt num1 = 21;`\n\n`}`\n\n`class childClass extends parentClass{ int num1 = 32;`\n\n`int num2 = /*A*/  num1`\n\n` }`",
    "question": "Which of the following keywords would you input for <code>/\\*A\\*/</code>, in the code snippet above to ensure that the resultant output  prints the number  <code>21</code> to the console?",
    "core": "The <code>super</code> keyword is used inside a derived, or child class to access methods and variables defined in the parent, or <code>super</code> class.",
    "explanation": "In the above code snippet we have the same variable <code>num1</code> declared in both parent class and child class. There is no way we can access the <code>num1</code> variable of parent class without using <code>super</code> keyword.",
    "options": [
      {
        "answer": "original",
        "correctAnswer": false
      },
      {
        "answer": "top",
        "correctAnswer": false
      },
      {
        "answer": "base",
        "correctAnswer": false
      },
      {
        "answer": "parent",
        "correctAnswer": false
      },
      {
        "answer": "super",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Have a look at the following snippet \n\n---\n     CREATE TABLE animals (\n      id MEDIUMINT NOT NULL AUTO_INCREMENT,\n      name CHAR(30) NOT NULL,\n      PRIMARY KEY (id)      );\n---\n    INSERT INTO animals (name) VALUES\n    ('dog'),('cat'),('penguin'),\n    ('whale'),('ostrich');\n---",
    "question": "Which **name** would have the id value of **1** in the resultant table?",
    "core": "When you insert a new record to the table, and the auto_increment field is NULL or DEFAULT, the value will automatically be incremented from 1 by default.",
    "explanation": "The **AUTO_INCREMENT** attribute can be used to generate a unique identity for new rows. \n\n> When you insert a new record to the table, and the auto_increment field is **NULL** or **DEFAULT**, the value will automatically be incremented. \n\nThis also applies to 0, unless the NO_AUTO_VALUE_ON_ZERO SQL_MODE is enabled.\n\n> AUTO_INCREMENT columns start from 1 by default.\n\n The automatically generated value can never be lower than 0.\n\n> Each table can have only one AUTO_INCREMENT column. \n\nIt must defined as a key (not necessarily the PRIMARY KEY or UNIQUE key). If the key consists of multiple columns, the AUTO_INCREMENT column must be the first one, unless the storage engine is Aria or MyISAM.",
    "options": [
      {
        "answer": "0",
        "correctAnswer": false
      },
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "2",
        "correctAnswer": false
      },
      {
        "answer": "3",
        "correctAnswer": false
      },
      {
        "answer": "1",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many times in programming where it is necessary to iterate over a piece of code many times.\n    In java there are four different ways in which we can achieve this. The while loop, the do-while loop,\n    the for loop and the enhanced for loop.\n    The following code snippet shows an example of one of these loops:\n\n---\n\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n\n---\n\n    int j = myArray.length; \n\n---\n\n    while( j < 4){ System.out.print(j + \" \" ); \n\n---\n\n    j++; \n\n---\n\n    }\n\n---",
    "question": "What will be the correct output of this code snippet?",
    "core": "With a While loop the contents of the loop will only be executed if the boolean expression in the while loop is true. It is possible for a while loop to never execute",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. \n<pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> \nNext we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> \nAfter this we create a while loop to loop through myArray and output certain values of the array. <pre> while(j < 4) </pre> As long as this expression is true the while loop will continue to run. It is important to note that a while loop might never actually execute. This is the case in the code snippet above. Initially j is set to the value of 4: <pre> int j = myArray.length; </pre> Next comes the while loop. The while expression checks if j is less than 4: <pre> while(j<4) </pre> The contents of the while loop will never execute in this code snippet as the while expression will never evaluate to true because j is equal to 4. This means there will be no output from this code snippet. </pre>",
    "options": [
      {
        "answer": "3",
        "correctAnswer": false
      },
      {
        "answer": "4 5",
        "correctAnswer": false
      },
      {
        "answer": "3 4",
        "correctAnswer": false
      },
      {
        "answer": "5",
        "correctAnswer": false
      },
      {
        "answer": "No output",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    int j = myArray.length; \n---\n    do{ System.out.print(j + \" \" ); \n---\n    j++; \n---\n    }while(j<3);\n---",
    "question": "What is the expected output ?",
    "core": "With a Do-while loop the expression statement is not checked until after the loop has run. A Do-while loop is always guaranteed to execute at least once.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create a do while loop to loop through myArray and output certain values of the array. <pre> do{ System.out.print(j + \" \" ); j++; }while(j<3); </pre> In this do while loop the loop will terminate when j is no longer less than 3. However we have set the value of j to myArray.length(4) in the above code. This means that the termination expression is false.However it is important to note that a do while loop will always execute at least once because the termination expression is at the end of the loop. This means that our code snippet will output the value of j, which in this case is 4. </pre>",
    "options": [
      {
        "answer": "4 5",
        "correctAnswer": false
      },
      {
        "answer": "5 6",
        "correctAnswer": false
      },
      {
        "answer": "3 4",
        "correctAnswer": false
      },
      {
        "answer": "5",
        "correctAnswer": false
      },
      {
        "answer": "4",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    int j = myArray.length; for(j = myArray.length;\n---\n    j<=5;j++){ System.out.print(j + \" \" );\n---\n    }",
    "question": "What is the expected output ?",
    "core": "A for loop is most commonly used when you know exactly how many times you want the loop to execute.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings: <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray: <pre> int j = myArray.length; </pre> After this we create a for loop to loop through myArray and output certain values of the array. There are 3 distinct parts to the declaration of the for loop. The first part is initialization expression: <pre> j = myArray.length; </pre> This sets the value of j for use inside the loop to 4, the length of myArray. This is only executed once at the start of the loop. Note that if we had not declared j earlier in the code we would need to do so in the initialization expression. For example: <pre> for(int j = myArray.length;j<=5;j++) </pre> The second part is the termination expression: <pre> j<=5; </pre> When this expression evaluates to false the loop will end. The third and final part is the increment/decrement expression: <pre> j++ </pre> This expression is executed at the end of each loop, thus increasing the value of j with each iteration of the loop. This is useful, for example, when checking the values of an array. It is also important to note that you can decrement this expression if necessary: <pre>j--</pre> To further explain this loop we will follow it's steps. On the loops first iteraton j is set to the value of myArray.length which is 4: <pre> j = myArray.length </pre> The loop then checks to see if the value of j is less than or equal to 5: <pre> j<=5; </pre> In this case it is so the loop continues. Next we print out the value of j, which is still 4: <pre> System.out.println(j + \" \"); </pre> Now we are at the end of the loop so j is incremented to 5: <pre> j++ </pre> On the loops second iteration the initialization expression is ignored as it only runs once at the start of the loop. The termination expression is the next to run. It checks to see if the value of j is less than or equal to 5: <pre> j<=5; </pre> It still is so the loop continues and prints out the value of j, which is 5: <pre> System.out.println(j + \" \"); </pre> As the loop ends j is incremented to 6: <pre> j++ </pre> On the loops third iteration the initilization expression is once again ignored. The termination expression checks to see if j is less than or equal to 5: <pre> j<=5; </pre> In this case it is not as j is now equal to 6. As the termination expression has now become false the loop will terminate. This leaves us with the output of 4 5. </pre>",
    "options": [
      {
        "answer": "3 4",
        "correctAnswer": false
      },
      {
        "answer": "5",
        "correctAnswer": false
      },
      {
        "answer": "4 5 6",
        "correctAnswer": false
      },
      {
        "answer": "No output",
        "correctAnswer": false
      },
      {
        "answer": "4 5",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    for(String names: myArray){ System.out.print(names + \" \" );\n---\n    Arrays.sort(myArray); }\n---",
    "question": "What is the expected output ?",
    "core": "Enhanced for loops are used with arrays. Their functionality is similar to a regular for loop except that you cannot define how many times you want the loop to run.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. Next we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> Now that our loop has completed the first iteration it will move on to the second iteration. Once again we will output the current value of names, which is now Darren. After this we sort the array. This has no effect at this stage however as the array has already been sorted. Now that the loop has completed its current iteration it moves on to the third iteration. In the third iteration we will once again output the current value of names. This time it will be john again. After this the array is once again sorted but with no effect and the loop ends. On the final iteration of the loop we begin by printing the current value of names which has now become Raymond. Finally the array is sorted again but as with the previous ywo iterations there is no effect. This will leave us with a final output of: John Darren John Raymond You may be wondering why Barry was never printed and john was printed twice. This is because before the first loop begins the array is unsorted and Bary is the final element in the array while John is the first. Then when the first loop begins it prints the first element which is John. Directly after this the array is sorted. This now means that Barry has become first element in the array. However because the sort() method sits inside the loop the array will not be updated until the second iteration of the loop. </pre>",
    "options": [
      {
        "answer": "John John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry Darren Raymond John",
        "correctAnswer": false
      },
      {
        "answer": "Barry Darren John Raymon",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Darren John Raymond",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    for(String names: myArray){ System.out.print(names + \" \");\n---\n    Arrays.sort(myArray);\n---\n    if(names == \"John\"){ break; \n---\n    } } \n---",
    "question": "What is the expected output ?",
    "core": "The break keyword is used to exit out of a loop.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. Next we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> After this we have an if statement that checks to see if the current value of names, which is John, is equal to John: <pre> if(names == \"John\") </pre> This evaluates to true so we enter the if statement. Inside the if statement is a break statement. <pre> break; </pre> This causes the loop to terminate. This leaves us with an output of John. It is important to note that when the sort method is called in a loop the array will not actually be updated until the end of that iteration. This means that although in the sorted array Barry is the first element. We will print john first because we entered the loop with John as our first element. </pre>",
    "options": [
      {
        "answer": "Barry Darren John",
        "correctAnswer": false
      },
      {
        "answer": "John Darren",
        "correctAnswer": false
      },
      {
        "answer": "Barry John",
        "correctAnswer": false
      },
      {
        "answer": "Barry",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Examine the following snippet: \n\n---\n\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n\n---\n\n    for(String names: myArray){ System.out.print(names + \" \");\n\n---\n\n    if(names == \"Raymond\"){ Arrays.sort(myArray); \n\n---\n\n    continue; \n\n---\n\n    } }\n\n---",
    "question": "What is the expected output?",
    "core": "The continue keyword is used to end the current iteration of the loop and immediatly start the next iteration",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. After this we have an if statement that checks to see if the current value of names, which is John, is equal to Raymond: <pre> if(names == \"Raymond\") </pre> This evaluates to false so we do not enter the if statement. On the second iteration of the loop we print the current value of names which is now Darren. After this we check to see if the current value of names, which is Darren, is equal to Raymond. This evaluates to false so we do not enter the if statement. On the third iteration of the loop we print the current value of names which is now Raymond. After this we check to see if the current value of names, which is Raymond, is equal to Raymond. This evaluates to true so we enter the if statement. The first thing we do inside the array is we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> After this comes the continue statement. <pre> continue; </pre> The continue statement is used to exit the current iteration of a loop and begin the next iteration. It is different to the break statement in that it does not actually end the loop. Next we begin the fourth and final iteration of the loop. First we print the current value of names which is once again Raymond. This is because our array has now been updated and in the updated array Raymond is the final element. After this we check to see if the current value of names is equal to Raymond. Once again this evaluates to true so we enter the if statement. We sort the array again but this has no effect as the array has already been sorted. Next comes the continue statement that breaks out of the current itration of the loop,which also happens to be the final output of the loop. This leaves us with the final output of: John Darren Raymon Raymond It is important to note that when the sort method is called in a loop the array will not actually be updated until the end of that iteration. This means that although in the sorted array Barry is the first element. We will print john first because we entered the loop with John as our first element. </pre",
    "options": [
      {
        "answer": "John Darren Barry Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Raymond Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Darren Raymond Barry",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Darren Raymond Raymond",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n`myArray = new int[4];`\n`myArray[0] = 19;`\n`myArray[1] = 32;`\n`myArray[2] = 4;`\n`myArray[3] = 23;`\n        \n`for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[i] + \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 4 times. outputting the value of \"myArray[i]\" each time. This will give us a final output of 19 32 4 23. </pre>",
    "options": [
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n        \n`for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[++i]+ \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[++i]\" each time. It is important to note that \"++i\" is an example of pre-incrementation. That means that it will increment the value <b>before</b> it is displayed. The value of myArray[i] is 19 going into the loop on the first iteration but because of pre-incrementation myArray[i] becomes 32 before the print statement is executed. Similarly on the second iteration of the loop the value of myArray[i] is 4 going into the loop but once again because of pre-incrementation myArray[i] becomes 32 before the print staetment is executed. This will give us a final output of 32 23. </pre>",
    "options": [
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n        \n`for(int i=0;i<4;i++){ System.out.print(myArray[i++]+ \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[i++]\" each time. It is important to note that \"i++\" is an example of post-incrementation. That means that it will increment the value <b>after</b> it is displayed. The value of myArray[i] is 19 going into the loop on the first iteration and is printed as such. However i incremented directly after the print statement is executed making the value of myArray[i] 32. i is the incremented again at the end of the first iteration of the loop via the iteration expression making the value of myArray[i] 4. On the second iteration of the loop the value of myArray[i] is 4 going into the loop and is once again printed as such. i is incremented directly after the print statement is executed making myArray[i] 23. This will give us a final output of 19 4. </pre>",
    "options": [
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n\n`Arrays.sort(myArray); for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[i] + \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. Next we use the Arrays.sort method on myArray. This will sort the array alphanumerically. It is important to note that to use this method it must be imported. This can be done by adding the following line at the very beggining of your java file. <pre>import java.util.Arrays;</pre> The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 4 times. outputting the value of \"myArray[i]\" each time. This will give us a final output of 19 32 4 23. </pre>",
    "options": [
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n        \n`Arrays.sort(myArray); for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[++i] + \" \");`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. Next we use the Arrays.sort method on myArray. This will sort the array alphanumerically. It is important to note that to use this method it must be imported. This can be done by adding the following line at the very beggining of your java file. <pre>import java.util.Arrays;</pre> The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[++i]\" each time. It is important to note that \"++i\" is an example of pre-incrementation. That means that it will increment the value <b>before</b> it is displayed. The value of myArray[i] is 4 going into the loop on the first iteration but because of pre-incrementation myArray[i] becomes 19 before the print statement is executed. Similarly on the second iteration of the loop the value of myArray[i] is 23 going into the loop but once again because of pre-incrementation myArray[i] becomes 32 before the print staetment is executed. This will give us a final output of 19 32. </pre>",
    "options": [
      {
        "answer": "4 23",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32 4 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n\n        \n`Arrays.sort(myArray); `\n`for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[i++] + \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. Next we use the Arrays.sort method on myArray. This will sort the array alphanumerically. It is important to note that to use this method it must be imported. This can be done by adding the following line at the very beggining of your java file. <pre>import java.util.Arrays;</pre> The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[i++]\" each time. It is important to note that \"i++\" is an example of post-incrementation. That means that it will increment the value <b>after</b> it is displayed. The value of myArray[i] is 4 going into the loop on the first iteration and is printed as such. However i is incremented directly after the print statement is executed making the value of myArray[i] 19. i is the incremented again at the end of the first iteration of the loop via the iteration expression making the value of myArray[i] 23. On the second iteration of the loop the value of myArray[i] is 23 going into the loop and is once again printed as such. i is incremented directly after the print statement is executed making myArray[i] 32. This will give us a final output of 4 23. </pre>",
    "options": [
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "19 32",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n\n---\n\n`Integer regNum = 4511;`\n\n---\n\n`String firstName = \"John\";`\n\n---\n\n`String lastName = \"Johnson\";`\n\n---\n\n`System.out.print(lastName.@method );`\n\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The equals() method will check if the contents of one String or Integer is equal to another.",
    "explanation": "It does this by comparing the actual contents of the Strings or Integers, unlike the == operator which checks to see if the reference values are the same. In the above code we create an Integer and two String . In the print statement we check to see if the contents of lastName are equal to \"regNum.toString().length()\". This will return false because \"regNum.toString().length()\" will return the String \"4\" and lastName will return the String \"Johnson\". There is also an equalsIgnoreCase() method which will only take a String. This method will check to see if the contenst of two Strings are equal regardless of type case. \n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The substring() method has two variants that will return a new String.",
    "explanation": "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3)); </pre> This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring.",
    "options": [
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The length() method returns the length of the String that it is invoked on",
    "explanation": "The first variation takes only one parameter. This is the index at which you want the substring to start. The returned String will be from this index to the end of the given String. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3));  This will return \"by\". The second variation of the substring method takes two parmeters. The index at which the substring should start and the index at which the substring should end. An example of this is:  String name = \"Bobby\"; System.out.println(name.substring(3,4));  It is important to note that in this variation the end index is NOT returned in the substring.",
    "options": [
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n ---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The replace() method has two variations that remove either characters or substrings and return a new String.",
    "explanation": "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\".",
    "options": [
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The replace() method has two variations that remove either characters or substrings and return a new String.",
    "explanation": "The first variation of this method takes two character parameters. The first character is the character to be replaced and the second character is the character you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.replace(\"b\",\"t\"); </pre> This will return \"Botty\". The second vaariation of this method takes two character sequence parameteres. The first character sequence is the character sequence to be replaced and the second is the character sequence you wish to replace it with. An example of this is: <pre> String name = \"Bobby\"; System.out.println(name.repalce(\"Bob\",\"To\")); </pre> This will return \"Toby\".",
    "options": [
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The isEmpty() method returns true if, and only if, the length is equal to 0.",
    "explanation": "There are two variations of this method. The first variation takes two parameters. The first is the String we wish to look for and the second is the point in the String at which we want to begin looking. An example of this is: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\",3)); </pre> This will return false because although lastName begins with \"Jo\" we start looking at index 3, which is the fourth letter (Dont forget index's start at 0). If we had searched for \"ns\" in place of \"Jo\" it would have returned true. The second variation takes only a single parameter and this is the String we are searching for. When only one parameter is given it automatically starts searching at index 0. An example of this would be: <pre> lastName = \"Johnson\"; System.out.println(lastName.startsWith(\"Jo\")); </pre> This would return true.",
    "options": [
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "true",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr[myArr.length()-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.length]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.lastIndex]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.lastIndex-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.length-1]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr<(int).4.2)>",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)1.3)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)2.6)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)3.8)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int).8)]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr[(int)3.8)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)1.3)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[myArr.length-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr<(int).4.2)>",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)2.6)]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following line of code:\n<pre><code>int</code>[ ] myArr = <code>new int</code>[10]</pre>",
    "question": "Which of the following options will access the @questions element in the array?",
    "core": "Elements in an array are <code>accessed</code> using the <code>zero index scale</code>, meaning if you wanted to access the first element its position would be zero.",
    "explanation": "An array is a way to hold more than one value at a time. Once an array has been created it can not be altered in any way. The following code segment illustrates how an array accesses its elements @Options will print the @questions element in the array to the console screen.\n<br><br>For a better understanding consider the following table.\n<br><br><img style=\"display:block;margin:0 auto\" src=\"../../../img/question_related_images/one_diamentional-array.png\">",
    "options": [
      {
        "answer": "myArr[myArr.length-1]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)2.6)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr<(int).4.2)>",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)1.3)]",
        "correctAnswer": false
      },
      {
        "answer": "myArr[(int)3.8)]",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Java enables you  to copy parts of one array into another .\nConsider the following code \n\n---\n    int [  ]  first = {1,2,3,4,5}\n---\n    int [  ]  second = new int[5] \n---\n    System.arraycopy( first, /*A*/, second, /*B*/,  /*C*/) \n---",
    "question": "What would you insert instead of **/\\*A\\*/**, **/\\*B\\*/**  and  **/\\*C\\*/** to achieve an array called  **second**   that contains the array :  <b>[1, 0, 0, 0, 0]</b>",
    "core": "The correct format for the **arraycopy** method is **arraycopy(Object src, int srcPos, Obj dest, int destPos, int ammountToCopy);",
    "explanation": "<br><br>Lets consider what this means.\n<br>Firstly we create the <code>arraycopy()</code> method. This method takes 5 parameters. <code>Obj src, int srcPos, Obj dest, int destPos, int ammountToCopy</code>\n<br><br><code>Obj src</code> is the array name you wish to copy elements from.\n<br><code>int srcPos</code>  is the position you wish to start copying elements from. Remember that arrays use zero indexing so if we wished to start copying from the first element then <code>int srcPos = 1</code>\n<br><code>Obj dest</code>  is the array that you wish to copy elements too.\n<br><code>int destPos</code>  indicates the starting position you will copy too in the destination array.\n<br><code>int ammountToCopy</code> indicates the number of elements to copy.",
    "options": [
      {
        "answer": "0,1,1",
        "correctAnswer": false
      },
      {
        "answer": "1,1,0",
        "correctAnswer": false
      },
      {
        "answer": "0,1,0",
        "correctAnswer": false
      },
      {
        "answer": "1,0,0",
        "correctAnswer": false
      },
      {
        "answer": "0,0,1",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n    i+=4;\n    break;\n    }\n---\n    System.out.print(i);\n    }\n---",
    "question": "What will be the outcome?",
    "core": "A <code>break</code> keyword results in the termination of the statement to which it applies (<code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop).",
    "explanation": "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>",
    "options": [
      {
        "answer": "012610",
        "correctAnswer": false
      },
      {
        "answer": "012",
        "correctAnswer": false
      },
      {
        "answer": "01",
        "correctAnswer": false
      },
      {
        "answer": "0126810",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n\tmyArray[i] = i+1;\n\tif(myArray[i] == 2) {\n\t\ti+=4;\n\t\tcontinue;\n\t}\n---\n\tSystem.out.print(i);\n    }",
    "question": "What will be the outcome?",
    "core": "The <code>continue</code> statement skips the current iteration of a <code>switch</code>, <code>for</code>, <code>do</code>, or <code>while</code> loop.",
    "explanation": "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements <br><code>int[] myArray = new int[10];</code>\n<br><br>The next line creates the <code>for loop</code> that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use <code>zero</code> indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop <code>i</code> = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value <code>1</code>!\n<br><br>Next comes the <code>if</code> statement. This tests if the element at <code>i</code> is equal to <code>2</code>. Don't forget that <code>i</code> is still equal to <code>0</code> and the value currently stored in the <code>0</code> element is <code>1</code>. <code>2</code> is not equal to <code>1</code>.  Because of this the <code>if</code> statement evaluates to <code>false</code> and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the <code>for loop</code>,  <code>i++</code> will get executed. This will increase <code>i</code> from <code>0</code> to <code>1</code>. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the <code>if</code> statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the <code>if</code> statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=4</code> is the same thing as saying <code>i = i + 4</code>. Knowing the value of <code>i</code> is currently <code>1</code>, we add <code>1 + 4</code> and store it back in <code>i</code>. This means <code>i</code> is now equal to <code>5</code>.\n<br>Next the <code>continue</code> statement gets executed. This will exit the current iteration of the <code>for loop</code>, without executing any code that may come after it, but will continue with the next iteration of loop. <code>i</code> increases by <code>1</code> to <code>6</code> and we start back at the first line of the <code>for loop</code>.\n<br>In the next line we again substitute the value for <code>i</code>. <code>myArray[6] = 6+1</code>, meaning the value stored in the 6th element of myArray is <code>7</code>. The conditional statement in the next line checks the see if the <code>6th element</code> is equal to <code>2</code>. It's not, so the code in the curly braces never gets executed and value for <code>i</code> currently <code>6</code> gets output to the console.\n<br>Currently <code>06</code> is output to the console. \n<br>This process continues, successfully, for the next <code>3</code> iterations of the <code>for loop</code>. After the current iteration <code>06789</code> is printed to the output and with <code>i</code> now <code>9</code>, the same as the length of the array, <code>9</code> the condition in the <code>for loop</code> fails and the loop terminates.",
    "options": [
      {
        "answer": "16789",
        "correctAnswer": false
      },
      {
        "answer": "12789",
        "correctAnswer": false
      },
      {
        "answer": "12789",
        "correctAnswer": false
      },
      {
        "answer": "01789",
        "correctAnswer": false
      },
      {
        "answer": "06789",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[] myArray = new int[10];\n---\n    for (int i = 0; i < myArray.length; i++) {\n---\n    myArray[i] = i+1;\n    if(myArray[i] == 2) {\n---\n    i+=4;\n    break;\n     }\n---\n    System.out.print(i);\n    }\n---",
    "question": "What will be the outcome?",
    "core": "A break statement results in the termination of the statement to which it applies (switch, for, do, or while).",
    "explanation": "Lets break this code down into step by step.\n<br>All were doing on the first line is creating an array that can hold 10 elements\n\n <br><code>int[] myArray = new int[10];</code>\n\n<br><br>The next line creates the for loop that will be used for looping through the array. You will see these a lot when working with arrays.\n<br>Next, <code>int i = 0</code> declares an int and sets its value to zero. This is the value we will be using to track how many times we have been through the loop. Its important to remember that arrays use zero indexing, therefor to access the first element in the array <code>i</code> must be equal to zero.\n<br><br>Next we need a condition and a way to increment the value <code>i</code>, <code> i < myArray.length; i++</code> basically says that if <code>i</code> is less than the length of the array, execute the code between the curly braces and then increment <code>i</code> by one..\nSo, the first time into the loop i = 0. When all the code within the loop has been executed increment i by 1 <code>i++</code>\n<br><br>In the next line we substitute zero for <code>i</code>, <code>myArray[0] = 0 + 1;</code>. This infers that the first element in the array stores the value 1!\n<br><br>Next comes the if statement. This tests if the element at <code>i</code> is equal to 2. Don't forget that <code>i</code> is still equal to 0 and the value currently stored in the 0 element is 1. 2 is not equal to 1.  Because of this the if statement evaluates to false and the code within the curly braces never gets executed.\n<br><br>The next line <code>System.out.println(i);</code> prints the current value for <code>i</code>, which is <code>0</code>, to the console.\n<br><br>Having now completed our first run through the for loop,  <code>i++</code> will get executed. This will increase <code>i</code> from 0 to 1. \n<br>Following the same steps as above we again substitute in the value for <code>i</code>. <code>myArray[1] = 1+1</code> implies that the second element in the array stores the value 2.\n<br>Next the if statement will test if the element at <code>i</code> is equal to 2. Having just previously set it we know this to be true. As the condition in the if statement now evaluates to true the code within the curly braces will get executed.\n<br><code>i+=6</code> is the same thing as saying <code>i = i +6</code>. Knowing the value of <code>i</code> is currently 2 we add 2 to 6 and store it back in <code>i</code>. This means <code>i</code> is now equal to 8.\n<br><br>And finally the <code>break</code> keyword will be executed. This will terminate the innermost loop and exit out of it without completing any code that might come after it.\n<br>As the <code>for loop</code> is now finished and there is no more code to execute the only output to the console is <code>0</code>",
    "options": [
      {
        "answer": "012",
        "correctAnswer": false
      },
      {
        "answer": "0126810",
        "correctAnswer": false
      },
      {
        "answer": "01",
        "correctAnswer": false
      },
      {
        "answer": "012610",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following code:\n\n---\n    try {\t\n    int x = 5, y = 0;\n    System.out.print(x/y);\n    }\n---\n    catch (ArithmeticException ae) {\n---\n    System.out.print(\"error\");\n---\n    }\n    /*insert*/ \n---\n    {\n    System.out.print(\"success\");\n    }\n---",
    "question": "What would you substitute for <code>/\\*insert\\*/</code> to output  the text \"<em style=\"color: green\">success</em>\"  to the console.",
    "core": "The <code>finally</code> block always executes when the try block exits.",
    "explanation": "The <code>finally</code> block will always be executed, even if unexpected errors within the <code>try</code> block occur.\n If your code inside the <code>try</code> or <code>catch</code> block includes a <code>return</code> statement, the code inside the <code>finally</code> block will get executed before the <code>return</code> statement.\n<br><br>A point of note, If the JVM exits while the <code>try/catch</code> block is being executed or the thread executing the <code>try/catch</code> block is killed or interrupted, the code within the <code>finally</code> block may not execute.",
    "options": [
      {
        "answer": "finished",
        "correctAnswer": false
      },
      {
        "answer": "finalize",
        "correctAnswer": false
      },
      {
        "answer": "finish",
        "correctAnswer": false
      },
      {
        "answer": "final",
        "correctAnswer": false
      },
      {
        "answer": "finally",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "The following is a snippet in Java :\n\n---\n    @command myDouble = 1.999f;\n---\n    int[] num = {myDouble.intValue(),2};\n---\n    System.out.print(num[0]);\n---",
    "question": "What is the expected output for the above ?",
    "core": "a <code> Double </code> is a <code>Number</code>, so it has the method <code>intValue </code>, which  you can then use to derive  a <code> primitive int </code>",
    "explanation": "In ordeer to answer this question you would need to know than in Java , a <code> Double </code> is a <code>double-precision </code> floating point number, similar to a float but with a larger range and precision. The term Double in this instance does not double the value! \n<br>\nYou will also need to know that <code>  intValue </code>    merely returns the integer part of the Double, so for 1.999 , you'll get 1, not 2. <br>\nFinally you will need to know that <i> int[] num = {myDouble.intValue(),2} </i> is creating an array called num, you are then printing the first element in this array <i> num[0] </i> \n<br>",
    "options": [
      {
        "answer": "8",
        "correctAnswer": false
      },
      {
        "answer": "2",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": false
      },
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "1",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "As part of your current project you are required that the doSomething() method is only available to other methods in the same class. No other class should be able to see or use its contents. Consider the following piece:\n\n---\n    /*insert here*/ void doSomething() {\n---\n    byte John = 21;\n---\n    boolean isTrue = false;\n---\n    if (isTrue == false) {\n---\n    System.out.println(\"John is 21\");\n---\n    }\n    }\n---",
    "question": "Which of the following in place of  /\\*insert here\\*/  will guarantee that the code above is only available to the methods in the class which its defined.",
    "core": "The <code>private</code> access modifier allows only methods in the same class to access the private method.",
    "explanation": "This <code>private method</code> is only available and can only be accessed by other methods within the class which contains it. All other classes will not be able to see, or use the code within the <code>private method</code>.",
    "options": [
      {
        "answer": "package-private",
        "correctAnswer": false
      },
      {
        "answer": "private-final",
        "correctAnswer": false
      },
      {
        "answer": "protected",
        "correctAnswer": false
      },
      {
        "answer": "private-method",
        "correctAnswer": false
      },
      {
        "answer": "private",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n---\n    int[ ] myArray = {1,2,3} ;\n---\n     for (int i = 0; i < myArray.length;)\n     {\n    i++;\n    System.out.println(myArray[i]);\n    };\n---",
    "question": "What is the expected output?",
    "core": "When incrementing an integer using <code> ++ </code> as in <code> i++ </code> this will increase the  value of the integer by 1 and change the actual value of the integer.",
    "explanation": "<br><code>int x = i++</code>  will increase a value called <code>i</code> by 1 and store the old value in <code>x</code>.\nHere i is incremented before accessing the list.\n So it reads one element ahead everytime. Therefore a run-time error will result when the array has run out of elements.\n\n<br><br>So if the code above were to be executed,  <code>i++</code> would eventually increment <code>i</code> to a value greater than the length of the <code>array</code>. This would cause a runtime error \n<br>Ok, lets run through the code and each iteration of the loop.\n<br>Look at the <code>for loop</code>.\n<br>Now knowing what you do from the above code snippets you might now see why <code>i++</code> here might cause an error. If not it will all be come clearer soon.\n<br><code>i++ </code> increments and update the value <code>i</code> by one and check to see if its old value is equal to <code>myArray.length</code> which is <code>3</code>. If it is, execute the code between the curly braces, if not continue to the next branch in the <code>if statement</code>\n<br><code>System.out.print(toCharArray[i])</code>, all this does is print the current value stored in element <code>1</code> to the console <code>e</code>\n\n<br>Next time through the loop, again the first condition increments <code>i</code>, updates the value for <code>1</code> and checks the old value against the length of the array.\n<br>Following the above procedure <code>i</code> will eventually increment to <code>4</code> and as there is no 4th element in the array we get the <em style=\"color: green\">run time error<em>",
    "options": [
      {
        "answer": "1 2 3",
        "correctAnswer": false
      },
      {
        "answer": "2 3",
        "correctAnswer": false
      },
      {
        "answer": "0 1",
        "correctAnswer": false
      },
      {
        "answer": "1 2",
        "correctAnswer": false
      },
      {
        "answer": "run-time error",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "The following piece of code, when written correctly, will terminate the program in which it belongs. \n\n---\n    System./*insert*/(0);\n---\n    System.out.println(\"This line will never be reached\");\n---",
    "question": "What would you typically substitute for <b> /\\*insert here\\*/ </b>  to ensure that the line below would not be reached and that the program terminates all its activity without returning the method  and without returning an exception?",
    "core": "System.exit(0); will terminate the currently running program.",
    "explanation": "*System.exit()* can be used to run shutdown hooks before the program quits. \n\nThis is a convenient way to handle shutdown in bigger programs, where all parts of the program can't (and shouldn't) be aware of each other. Then, if someone wants to quit, he can simply call *System.exit()*, and the *shutdown hooks* (if properly set up) take care of doing all necessary shutdown ceremonies such as closing files, releasing resources etc.\n\n\"This method never returns normally.\" means just that the method won't return; once a thread goes there, it won't come back.",
    "options": [
      {
        "answer": "end",
        "correctAnswer": false
      },
      {
        "answer": "terminate",
        "correctAnswer": false
      },
      {
        "answer": "finish",
        "correctAnswer": false
      },
      {
        "answer": "close",
        "correctAnswer": false
      },
      {
        "answer": "exit",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "You are developing a Java program for a new business. The program will need to store several objects in an **array** called **myArr**.",
    "question": "Which of the following code will correctly output the **number of elements** in this  array?",
    "core": "The Array class in Java contains a <code>property</code> called <code>length</code>. This property stores the amount of elements the array contains.",
    "explanation": "The length of the array 'myArr' is set when the array is first created and is stored in a property called length. It can be accessed using .notation as follows \"myArr.length\"\n<br>To guarantee it prints to a new line we use the System.Out.Println() method.\n<br>If the question asked to print the output to the same line then the System.Out.Print() would be used instead.",
    "options": [
      {
        "answer": "myArr.number",
        "correctAnswer": false
      },
      {
        "answer": "myArr.size_of",
        "correctAnswer": false
      },
      {
        "answer": "myArr.array_size",
        "correctAnswer": false
      },
      {
        "answer": "myArr.elements",
        "correctAnswer": false
      },
      {
        "answer": "myArr.length",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Conside the following piece of code:\n\n---\n    /*A*/ {\t\n    int x = 5, y = 0;\n---\n    System.out.println(x/y);\n---\n    }\n    /*B*/ (ArithmeticException ae) {\n\tSystem.out.println(\"error\");\n---\n    }\n---",
    "question": "Which of the following would you substitute for <code>/\\*A\\*/</code> and <code>/\\*B\\*/</code> to ensure that the code : `System.out.println( )` is executed and that  the string **error** then  prints to the console?",
    "core": "The Java <code>try</code> block is used to enclose code that might throw an exception. The Java <code>catch</code> block is then  used to <code>handle</code> the Exception.",
    "explanation": "Run-time errors in Java are called exceptions, and the process for handling these errors is called exception handling. Code that may produce errors must be placed in a <code>try/catch</code> block.<br>\n<code>try</code>, tells the compiler, <code>try</code> to execute the code between the curly braces, but if something happens, <code>catch</code> the error and execute the code that will deal with it.\n<br>\nDifferent exceptions will be thrown for different type of errors. If the <code>catch</code> block exists in the program for this particular type of an error, it will be caught and the program will jump into the <code>catch</code> block to execute the code located there. The program will stay alive, and this exception is considered to be taken care of.",
    "options": [
      {
        "answer": "do/output",
        "correctAnswer": false
      },
      {
        "answer": "first/then",
        "correctAnswer": false
      },
      {
        "answer": "run/lastly",
        "correctAnswer": false
      },
      {
        "answer": "if/finally",
        "correctAnswer": false
      },
      {
        "answer": "try/catch",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "The **binarySearch method** allows you to search for a value within an array and return its element.\nConsider the following array :\n\n---\n    int [  ] myArray = {1,2,3} \n---",
    "question": "What would you insert into \n\n---\n     BinarySearch ( int[ ] myArray  , /*insert*/ ) \n---\nto return **-1**",
    "core": "The <code>binarySearch</code> method returns a <code>-1</code> if the element is not found",
    "explanation": "The correct format for the binarySearch method <pre>binarySearch(int [ ] arr, int keySearchFor);</pre>\n\nThis method returns index of the search key, if it is contained in the array, else it returns (-(insertion point) - 1). The insertion point is the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key",
    "options": [
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "1",
        "correctAnswer": false
      },
      {
        "answer": "3",
        "correctAnswer": false
      },
      {
        "answer": "2",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Consider the following Java code snippet:\n\n`public class test {`\n\n`public static void main(String[] args) {`\n\n`System.out.println(new childClass().num2);`\n\n`}`\n\n`}`\n\n`class parentClass{`\n\n`ìnt num1 = 21;`\n\n`}`\n\n`class childClass extends parentClass{ int num1 = 32;`\n\n`int num2 = /*A*/  num1`\n\n` }`",
    "question": "Which of the following keywords would you input for <code>/\\*A\\*/</code>, in the code snippet above to ensure that the resultant output  prints the number  <code>21</code> to the console?",
    "core": "The <code>super</code> keyword is used inside a derived, or child class to access methods and variables defined in the parent, or <code>super</code> class.",
    "explanation": "In the above code snippet we have the same variable <code>num1</code> declared in both parent class and child class. There is no way we can access the <code>num1</code> variable of parent class without using <code>super</code> keyword.",
    "options": [
      {
        "answer": "original",
        "correctAnswer": false
      },
      {
        "answer": "base",
        "correctAnswer": false
      },
      {
        "answer": "top",
        "correctAnswer": false
      },
      {
        "answer": "parent",
        "correctAnswer": false
      },
      {
        "answer": "super",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "There are many different **String methods** in Java. These range from methods that   check the **contents** of Strings, to methods that **manipulate** Strings.\n \nIt is important to know these Strings and understand how they work.\n\nThe following code shows an example of a String method at work:\n\n---\n     Integer regNum = 4511;\n---\n     String firstName = \"John\";\n---\n     String lastName = \"Johnson\";\n---\n     System.out.print(lastName.@method );\n---",
    "question": "What is the correct output for the code shown above?",
    "core": "The toString() method returns a String consisting of name of the class of which the object is an instance, the at character and the unsigned hexadecimal representation of the object.",
    "explanation": "This method is generally overriden to return user specific data. \nThis is seen as good programming practice.\n For example in the code above if we had a Person class we could override the to string method to return details about that Person, such as regNum, firstName and lastName, when it is invoked. The following code is an example of how we would do this. \n\n    public String toString()\n    { return \"Registration Number: \" + \n    this.regNum + \", First Name: \"+ \n    this.firstName + \"and Last Name: \" \n    + this.lastName; }\n\n\n When the toString() method is invoked on a Person Object, which was constructed with the parameters of \"(4511,\"John\", \"Johnson\")\", this would produce the following output: \"Registration Number: 4511, First Name: John and Last Name: Johnson\" Here however it simply returns the value of the string it is invoked on.",
    "options": [
      {
        "answer": "false",
        "correctAnswer": false
      },
      {
        "answer": "son",
        "correctAnswer": false
      },
      {
        "answer": "7",
        "correctAnswer": false
      },
      {
        "answer": "John",
        "correctAnswer": false
      },
      {
        "answer": "Johnson",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Have a look at the following snippet \n\n---\n     CREATE TABLE animals (\n      id MEDIUMINT NOT NULL AUTO_INCREMENT,\n      name CHAR(30) NOT NULL,\n      PRIMARY KEY (id)      );\n---\n    INSERT INTO animals (name) VALUES\n    ('dog'),('cat'),('penguin'),\n    ('whale'),('ostrich');\n---",
    "question": "Which **name** would have the id value of **1** in the resultant table?",
    "core": "When you insert a new record to the table, and the auto_increment field is NULL or DEFAULT, the value will automatically be incremented from 1 by default.",
    "explanation": "The **AUTO_INCREMENT** attribute can be used to generate a unique identity for new rows. \n\n> When you insert a new record to the table, and the auto_increment field is **NULL** or **DEFAULT**, the value will automatically be incremented. \n\nThis also applies to 0, unless the NO_AUTO_VALUE_ON_ZERO SQL_MODE is enabled.\n\n> AUTO_INCREMENT columns start from 1 by default.\n\n The automatically generated value can never be lower than 0.\n\n> Each table can have only one AUTO_INCREMENT column. \n\nIt must defined as a key (not necessarily the PRIMARY KEY or UNIQUE key). If the key consists of multiple columns, the AUTO_INCREMENT column must be the first one, unless the storage engine is Aria or MyISAM.",
    "options": [
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "2",
        "correctAnswer": false
      },
      {
        "answer": "0",
        "correctAnswer": false
      },
      {
        "answer": "3",
        "correctAnswer": false
      },
      {
        "answer": "1",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    int j = myArray.length; for(j = myArray.length;\n---\n    j<=5;j++){ System.out.print(j + \" \" );\n---\n    }",
    "question": "What is the expected output ?",
    "core": "A for loop is most commonly used when you know exactly how many times you want the loop to execute.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings: <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray: <pre> int j = myArray.length; </pre> After this we create a for loop to loop through myArray and output certain values of the array. There are 3 distinct parts to the declaration of the for loop. The first part is initialization expression: <pre> j = myArray.length; </pre> This sets the value of j for use inside the loop to 4, the length of myArray. This is only executed once at the start of the loop. Note that if we had not declared j earlier in the code we would need to do so in the initialization expression. For example: <pre> for(int j = myArray.length;j<=5;j++) </pre> The second part is the termination expression: <pre> j<=5; </pre> When this expression evaluates to false the loop will end. The third and final part is the increment/decrement expression: <pre> j++ </pre> This expression is executed at the end of each loop, thus increasing the value of j with each iteration of the loop. This is useful, for example, when checking the values of an array. It is also important to note that you can decrement this expression if necessary: <pre>j--</pre> To further explain this loop we will follow it's steps. On the loops first iteraton j is set to the value of myArray.length which is 4: <pre> j = myArray.length </pre> The loop then checks to see if the value of j is less than or equal to 5: <pre> j<=5; </pre> In this case it is so the loop continues. Next we print out the value of j, which is still 4: <pre> System.out.println(j + \" \"); </pre> Now we are at the end of the loop so j is incremented to 5: <pre> j++ </pre> On the loops second iteration the initialization expression is ignored as it only runs once at the start of the loop. The termination expression is the next to run. It checks to see if the value of j is less than or equal to 5: <pre> j<=5; </pre> It still is so the loop continues and prints out the value of j, which is 5: <pre> System.out.println(j + \" \"); </pre> As the loop ends j is incremented to 6: <pre> j++ </pre> On the loops third iteration the initilization expression is once again ignored. The termination expression checks to see if j is less than or equal to 5: <pre> j<=5; </pre> In this case it is not as j is now equal to 6. As the termination expression has now become false the loop will terminate. This leaves us with the output of 4 5. </pre>",
    "options": [
      {
        "answer": "5",
        "correctAnswer": false
      },
      {
        "answer": "4 5 6",
        "correctAnswer": false
      },
      {
        "answer": "4",
        "correctAnswer": false
      },
      {
        "answer": "3 4",
        "correctAnswer": false
      },
      {
        "answer": "4 5",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "---\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n---\n    for(String names: myArray){ System.out.print(names + \" \" );\n---\n    Arrays.sort(myArray); }\n---",
    "question": "What is the expected output ?",
    "core": "Enhanced for loops are used with arrays. Their functionality is similar to a regular for loop except that you cannot define how many times you want the loop to run.",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. Next we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> Now that our loop has completed the first iteration it will move on to the second iteration. Once again we will output the current value of names, which is now Darren. After this we sort the array. This has no effect at this stage however as the array has already been sorted. Now that the loop has completed its current iteration it moves on to the third iteration. In the third iteration we will once again output the current value of names. This time it will be john again. After this the array is once again sorted but with no effect and the loop ends. On the final iteration of the loop we begin by printing the current value of names which has now become Raymond. Finally the array is sorted again but as with the previous ywo iterations there is no effect. This will leave us with a final output of: John Darren John Raymond You may be wondering why Barry was never printed and john was printed twice. This is because before the first loop begins the array is unsorted and Bary is the final element in the array while John is the first. Then when the first loop begins it prints the first element which is John. Directly after this the array is sorted. This now means that Barry has become first element in the array. However because the sort() method sits inside the loop the array will not be updated until the second iteration of the loop. </pre>",
    "options": [
      {
        "answer": "Barry Darren Raymond John",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry Darren John Raymon",
        "correctAnswer": false
      },
      {
        "answer": "John John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Darren John Raymond",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "Examine the following snippet: \n\n---\n\n    String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"};\n\n---\n\n    for(String names: myArray){ System.out.print(names + \" \");\n\n---\n\n    if(names == \"Raymond\"){ Arrays.sort(myArray); \n\n---\n\n    continue; \n\n---\n\n    } }\n\n---",
    "question": "What is the expected output?",
    "core": "The continue keyword is used to end the current iteration of the loop and immediatly start the next iteration",
    "explanation": "<pre> In the above example we create an array called myArray, which contains four Strings. <pre> String[] myArray = {\"John\",\"Darren\",\"Raymond\",\"Barry\"}; </pre> Next we create an int called j and set the value to the length of myArray <pre> int j = myArray.length; </pre> After this we create an enhanced for loop to loop through myArray and output certain values of the array. <pre> for(String names: myArray) </pre> The syntax for an enhanced for loop is slightly different from a normal for loop. Here we declare the type of the elements in the array, which in this case is String: <pre> for(<b><i>String</i></b> names: myArray) </pre> If this type is different to the type of the the array then you will recieve a compilation error. Next is the element identifier, which in this case is names: <pre> for(String <b><i>names</i></b>: myArray) </pre> This is the current element in the array. It is used to reference and manipulate the current element of the array. For example on the first iteration of the loop names would be equal to the first element of the array, on the second iteration names would be equal to the second element of the array and so on. Finally we have the name of the array to be looped through, which in this case is myArray: <pre> for(String names: <b><i>myArray</i></b>) </pre> Next we will follow the output of the array. For the first iteration of the array we output the current value of names: <pre> System.out.println(names + \" \"); </pre> This will be John as John is the first element of myArray. After this we have an if statement that checks to see if the current value of names, which is John, is equal to Raymond: <pre> if(names == \"Raymond\") </pre> This evaluates to false so we do not enter the if statement. On the second iteration of the loop we print the current value of names which is now Darren. After this we check to see if the current value of names, which is Darren, is equal to Raymond. This evaluates to false so we do not enter the if statement. On the third iteration of the loop we print the current value of names which is now Raymond. After this we check to see if the current value of names, which is Raymond, is equal to Raymond. This evaluates to true so we enter the if statement. The first thing we do inside the array is we sort the array: <pre> Arrays.sort(myArray); </pre> This sorts the array alphabetically. This turns our array from: <pre> {\"John\",\"Darren\",\"Raymond\",\"Barry\"} </pre> to: <pre> {\"Barry\",\"Darren\",\"John\",\"Raymond\"} </pre> It is also very important to note that the sort() method must be imported to be used otherwise you will recieve a compilation error. This can be achieved by inserting the following at the top of your code: <pre> import java.util.Arrays; </pre> After this comes the continue statement. <pre> continue; </pre> The continue statement is used to exit the current iteration of a loop and begin the next iteration. It is different to the break statement in that it does not actually end the loop. Next we begin the fourth and final iteration of the loop. First we print the current value of names which is once again Raymond. This is because our array has now been updated and in the updated array Raymond is the final element. After this we check to see if the current value of names is equal to Raymond. Once again this evaluates to true so we enter the if statement. We sort the array again but this has no effect as the array has already been sorted. Next comes the continue statement that breaks out of the current itration of the loop,which also happens to be the final output of the loop. This leaves us with the final output of: John Darren Raymon Raymond It is important to note that when the sort method is called in a loop the array will not actually be updated until the end of that iteration. This means that although in the sorted array Barry is the first element. We will print john first because we entered the loop with John as our first element. </pre",
    "options": [
      {
        "answer": "John Darren Barry Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Raymond Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry Darren John Raymond",
        "correctAnswer": false
      },
      {
        "answer": "Barry John Darren Raymond",
        "correctAnswer": false
      },
      {
        "answer": "John Darren Raymond Raymond",
        "correctAnswer": true
      }
    ]
  },
  {
    "background": "An array is a container object that holds a user defined number of values of a \ncertain type. Arrays are powerful tools in java. It is for this \nreason that it is important you understand how they are defined, \nhow they work and the operations they can perform.\n\nThe following code snippet shows an example of an array at work:\n\n---\n`int[] myArray;`\n\n`myArray = new int[4];`\n\n`myArray[0] = 19;`\n\n`myArray[1] = 32;`\n\n`myArray[2] = 4;`\n\n`myArray[3] = 23;`\n\n        \n`Arrays.sort(myArray); `\n`for(int i=0;i<4;i++)`\n`{ System.out.print(myArray[i++] + \" \"); }`",
    "question": "What is the output of the code shown above?",
    "core": "An Array is an object that holds values of a fixed type which are accessed by their numerical index",
    "explanation": "<pre> In the code snippet above we begin by declaring an array of integers. Our next step is the set the size of the array. In this case we set it to 4. After this step we must set the values of each index in the array. We set the value of \"myArray[0]\" to 19, \"myArray[1]\" to 32, \"myArray[2]\" to 4 and finally \"myArray[3]\" to 23. There is a much shorter way of declaring and creating arrays. The code for this way is as follows: <pre> String[] myArray = {19,32,4,23}; </pre> It is important to note that array indexes begin at 0. This means that the 4th element of an array is actually located at index 3 in the array. Next we use the Arrays.sort method on myArray. This will sort the array alphanumerically. It is important to note that to use this method it must be imported. This can be done by adding the following line at the very beggining of your java file. <pre>import java.util.Arrays;</pre> The final part of our code snippet is a for loop that loops through the array and outputs the current index each time. First we set the initialization expression. This sets the starting value of i. <pre>int i = 0</pre> Next we set the termination expression. When this evaluates to false the loop will terminate <pre>i < 4</pre> And finally we set the increment expression. This will increment the value of i by 1 at the end of each iteration. <pre>i++</pre> Here our loop will run 2 times. outputting the value of \"myArray[i++]\" each time. It is important to note that \"i++\" is an example of post-incrementation. That means that it will increment the value <b>after</b> it is displayed. The value of myArray[i] is 4 going into the loop on the first iteration and is printed as such. However i is incremented directly after the print statement is executed making the value of myArray[i] 19. i is the incremented again at the end of the first iteration of the loop via the iteration expression making the value of myArray[i] 23. On the second iteration of the loop the value of myArray[i] is 23 going into the loop and is once again printed as such. i is incremented directly after the print statement is executed making myArray[i] 32. This will give us a final output of 4 23. </pre>",
    "options": [
      {
        "answer": "19 32 4 23",
        "correctAnswer": false
      },
      {
        "answer": "32 23",
        "correctAnswer": false
      },
      {
        "answer": "4 19 23 32",
        "correctAnswer": false
      },
      {
        "answer": "19 4",
        "correctAnswer": false
      },
      {
        "answer": "4 23",
        "correctAnswer": true
      }
    ]
  }
]


